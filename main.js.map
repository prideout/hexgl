{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/gl-matrix/lib/gl-matrix/common.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/mat2.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/mat2d.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/mat3.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/mat4.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/vec3.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/vec4.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/quat.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/quat2.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix/vec2.js","webpack:///./node_modules/gl-matrix/lib/gl-matrix.js","webpack:///./src/urls.ts","webpack:///./src/app.ts","webpack:///./node_modules/typed-web-workers/lib/index.js","webpack:///./node_modules/typed-web-workers/lib/TypedWorker.js","webpack:///./src/chasecam.ts","webpack:///./src/display.ts","webpack:///./src/sampler.ts","webpack:///./src/simulation.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","setMatrixArrayType","type","degree","PI","toRadian","a","equals","b","abs","max","out","clone","copy","identity","fromValues","m00","m01","m10","m11","set","transpose","a1","invert","a0","a2","a3","det","adjoint","determinant","multiply","b0","b1","b2","b3","rotate","rad","sin","cos","mat2_scale","v","v0","v1","fromRotation","fromScaling","str","frob","sqrt","pow","LDU","L","D","U","add","subtract","exactEquals","mat2_equals","multiplyScalar","multiplyScalarAndAdd","scale","mul","sub","mat2d_create","mat2d_clone","mat2d_copy","mat2d_identity","mat2d_fromValues","tx","ty","mat2d_set","mat2d_invert","aa","ab","ac","ad","atx","aty","mat2d_determinant","mat2d_multiply","a4","a5","b4","b5","mat2d_rotate","mat2d_scale","translate","mat2d_fromRotation","mat2d_fromScaling","fromTranslation","mat2d_str","mat2d_frob","mat2d_add","mat2d_subtract","mat2d_multiplyScalar","mat2d_multiplyScalarAndAdd","mat2d_exactEquals","mat2d_equals","mat2d_mul","mat2d_sub","mat3_create","fromMat4","mat3_clone","mat3_copy","mat3_fromValues","m02","m12","m20","m21","m22","mat3_set","mat3_identity","mat3_transpose","a01","a02","a12","mat3_invert","a00","a10","a11","a20","a21","a22","b01","b11","b21","mat3_adjoint","mat3_determinant","mat3_multiply","b00","b02","b10","b12","b20","b22","mat3_translate","x","y","mat3_rotate","mat3_scale","mat3_fromTranslation","mat3_fromRotation","mat3_fromScaling","fromMat2d","fromQuat","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","normalFromMat4","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","projection","width","height","mat3_str","mat3_frob","mat3_add","mat3_subtract","mat3_multiplyScalar","mat3_multiplyScalarAndAdd","mat3_exactEquals","mat3_equals","a6","a7","a8","b6","b7","b8","mat3_mul","mat3_sub","mat4_create","mat4_clone","mat4_copy","mat4_fromValues","m03","m13","m23","m30","m31","m32","m33","mat4_set","mat4_identity","mat4_transpose","mat4_invert","mat4_adjoint","mat4_determinant","mat4_multiply","mat4_translate","mat4_scale","mat4_rotate","axis","len","rotateX","rotateY","rotateZ","mat4_fromTranslation","mat4_fromScaling","mat4_fromRotation","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","xy","xz","yz","fromQuat2","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","getTranslation","mat","getScaling","getRotation","trace","S","fromRotationTranslationScale","sx","sy","sz","fromRotationTranslationScaleOrigin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","mat4_fromQuat","frustum","left","right","bottom","top","near","far","rl","tb","nf","perspective","fovy","aspect","f","tan","Infinity","perspectiveFromFieldOfView","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","ortho","lr","bt","lookAt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","targetTo","target","mat4_str","mat4_frob","mat4_add","mat4_subtract","mat4_multiplyScalar","mat4_multiplyScalarAndAdd","mat4_exactEquals","mat4_equals","a9","a14","a15","b9","b13","b14","b15","mat4_mul","mat4_sub","vec3_create","vec3_clone","vec3_length","vec3_fromValues","vec3_copy","vec3_set","vec3_add","vec3_subtract","vec3_multiply","divide","ceil","floor","min","round","vec3_scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","vec3_dot","cross","lerp","hermite","factorTimes2","factor1","factor2","factor3","factor4","bezier","inverseFactor","inverseFactorTimesTwo","zScale","transformMat4","transformMat3","transformQuat","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","vec3_rotateX","vec3_rotateY","vec3_rotateZ","angle","tempA","tempB","cosine","acos","vec3_str","vec3_exactEquals","vec3_equals","vec","vec3_sub","vec3_mul","div","dist","sqrDist","vec3_len","sqrLen","forEach","stride","offset","count","fn","arg","length","vec4_create","vec4_clone","vec4_fromValues","vec4_copy","vec4_set","vec4_add","vec4_subtract","vec4_multiply","vec4_divide","vec4_ceil","vec4_floor","vec4_min","vec4_max","vec4_round","vec4_scale","vec4_scaleAndAdd","vec4_distance","vec4_squaredDistance","vec4_length","vec4_squaredLength","vec4_negate","vec4_inverse","vec4_normalize","vec4_dot","vec4_lerp","vec4_random","v2","v3","v4","s1","s2","vec4_transformMat4","vec4_transformQuat","ix","iy","iz","iw","vec4_str","vec4_exactEquals","vec4_equals","vec4_sub","vec4_mul","vec4_div","vec4_dist","vec4_sqrDist","vec4_len","vec4_sqrLen","vec4_forEach","quat_create","quat_identity","setAxisAngle","getAxisAngle","out_axis","quat_multiply","quat_rotateX","quat_rotateY","quat_rotateZ","calculateW","slerp","omega","cosom","sinom","scale0","scale1","quat_random","u1","u2","u3","sqrt1MinusU1","sqrtU1","quat_invert","dot","invDot","conjugate","fromMat3","fTrace","fRoot","j","k","fromEuler","halfToRad","cx","cy","cz","quat_str","tmpvec3","xUnitVec3","yUnitVec3","temp1","temp2","matr","quat_clone","quat_fromValues","quat_copy","quat_set","quat_add","quat_mul","quat_scale","quat_dot","quat_lerp","quat_length","quat_len","quat_squaredLength","quat_sqrLen","quat_normalize","quat_exactEquals","quat_equals","rotationTo","sqlerp","setAxes","view","quat2_create","dq","quat2_clone","quat2_fromValues","w1","fromRotationTranslationValues","quat2_fromRotationTranslation","quat2_fromTranslation","quat2_fromRotation","quat2_fromMat4","outer","quat2_copy","quat2_identity","quat2_set","getReal","getDual","setReal","setDual","quat2_getTranslation","quat2_translate","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","quat2_rotateX","quat2_rotateY","quat2_rotateZ","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","axisLength","quat2_add","quat2_multiply","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","quat2_mul","quat2_scale","quat2_dot","quat2_lerp","mt","quat2_invert","sqlen","quat2_squaredLength","quat2_conjugate","quat2_length","quat2_len","quat2_sqrLen","quat2_normalize","a_dot_b","quat2_str","quat2_exactEquals","quat2_equals","vec2_create","vec2_clone","vec2_fromValues","vec2_copy","vec2_set","vec2_add","vec2_subtract","vec2_multiply","vec2_divide","vec2_ceil","vec2_floor","vec2_min","vec2_max","vec2_round","vec2_scale","vec2_scaleAndAdd","vec2_distance","vec2_squaredDistance","vec2_length","vec2_squaredLength","vec2_negate","vec2_inverse","vec2_normalize","vec2_dot","vec2_cross","vec2_lerp","vec2_random","transformMat2","transformMat2d","vec2_transformMat3","vec2_transformMat4","vec2_rotate","p0","p1","sinC","cosC","vec2_angle","len1","len2","vec2_str","vec2_exactEquals","vec2_equals","vec2_len","vec2_sub","vec2_mul","vec2_div","vec2_dist","vec2_sqrDist","vec2_sqrLen","vec2_forEach","__webpack_exports__","common_namespaceObject","mat2_namespaceObject","mat2d_namespaceObject","mat3_namespaceObject","mat4_namespaceObject","quat_namespaceObject","quat2_namespaceObject","vec2_namespaceObject","vec3_namespaceObject","vec4_namespaceObject","iblSuffix","Filament","getSupportedFormatSuffix","environ","ibl","skySmall","skyLarge","tracksMaterial","diffuse","specular","normal","mesh","collision","elevation","urls","gl_matrix_1","typed_web_workers_1","chasecam_1","display_1","sampler_1","simulation_1","initialVehiclePosition","vec3","vehicleMatrix","mat4","init","window","App","canvas","document","getElementsByTagName","this","display","chasecam","camera","simulation","resetPosition","tick","time","requestAnimationFrame","Date","now","dt","getSpeedRatio","render","createWorker","input","callback","result","console","log","postMessage","TypedWorker_1","workerFunction","onMessage","output","TypedWorker","_this","blob","Blob","_nativeWorker","Worker","URL","createObjectURL","onmessage","messageEvent","data","workerMessage","transfer","terminate","ChaseCamera","speedOffset","speedOffsetMax","yoffset","zoffset","viewOffset","speedRatio","vehicleOrientation","quat","dir","position","Display","engine","Engine","scene","createScene","skybox","createSkyFromKtx","setSkybox","indirectLight","createIblFromKtx","setIntensity","setIndirectLight","swapChain","createSwapChain","renderer","createRenderer","createCamera","createView","setCamera","setScene","sampler","TextureSampler","MinFilter","LINEAR_MIPMAP_LINEAR","MagFilter","LINEAR","WrapMode","REPEAT","material","createMaterial","addEntity","entity","getRenderableCount","fetch","destroySkybox","filenames","shipmi","createInstance","assetUrls","map","path","asset","ship","createRenderable","bgasset","bgurls","bgmi","_i","_a","sunlight","EntityManager","LightManager","Builder","LightManager$Type","SUN","color","intensity","direction","build","resize","addEventListener","tcm","getTransformManager","inst","getInstance","setTransform","dpr","devicePixelRatio","innerWidth","innerHeight","setViewport","Fov","Camera$Fov","HORIZONTAL","VERTICAL","setProjectionFov","matinstance","createTextureFromJpeg","setTextureParameter","loadFilamesh","renderable","Sampler","url","image","Image","pixels","onload","createElement","context","getContext","drawImage","getImageData","src","ready","getPixel","g","getPixelBilinear","fx","fy","rx","ry","dx","dy","cxy","cf1","cf2","getPixelF","getPixelFBilinear","Simulation","dummyMatrix","keyState","backward","forward","ltrigger","rtrigger","use","onKeyDown","onKeyUp","maxSpeed","boosterSpeed","active","destroyed","falling","movement","rotation","roll","rollAxis","drift","shieldDelay","speed","boost","shield","angular","quaternion","collisionPixelRatio","collisionDetection","collisionPreviousPosition","heightPixelRatio","heightBias","heightLerp","heightScale","rollAngle","rollLerp","rollDirection","gradient","gradientTarget","gradientLerp","gradientScale","gradientVector","tilt","tiltTarget","tiltLerp","tiltScale","tiltVector","repulsionVLeft","repulsionVRight","repulsionVFront","repulsionVScale","repulsionAmount","repulsionForce","collisionState","front","getMatrix","pos","fallVector","driftLerp","angularLerp","rollAmount","angularAmount","angularSpeed","thrust","airResist","airAngularSpeed","airBrake","airDrift","zero3","repulsionLerp","txz","heightCheck","collisionCheck","dummyquat","dummypos","xform","gradientDelta","epsilon","gradientAxis","tiltDelta","tiltAxis","rollDelta","event","keyCode","sr","getRealSpeed","shieldDamage","lPos","rPos","lCol","rCol","repulsionCap","repulsionRatio","collisionSpeedDecrease","collisionSpeedDecreaseCoef","delta","nheight","atan2"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\r\n\r\n// Configuration Constants\r\nexport var EPSILON = 0.000001;\r\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\r\nexport var RANDOM = Math.random;\r\n\r\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Type} type Array type, such as Float32Array or Array\r\n */\r\nexport function setMatrixArrayType(type) {\r\n  ARRAY_TYPE = type;\r\n}\r\n\r\nvar degree = Math.PI / 180;\r\n\r\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\r\nexport function toRadian(a) {\r\n  return a * degree;\r\n}\r\n\r\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {mat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\r\nexport function fromValues(m00, m01, m10, m11) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\r\nexport function set(out, m00, m01, m10, m11) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m10;\r\n  out[3] = m11;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache\r\n  // some values\r\n  if (out === a) {\r\n    var a1 = a[1];\r\n    out[1] = a[2];\r\n    out[2] = a1;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[2];\r\n    out[2] = a[1];\r\n    out[3] = a[3];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n\r\n  // Calculate the determinant\r\n  var det = a0 * a3 - a2 * a1;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = a3 * det;\r\n  out[1] = -a1 * det;\r\n  out[2] = -a2 * det;\r\n  out[3] = a0 * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the source matrix\r\n * @returns {mat2} out\r\n */\r\nexport function adjoint(out, a) {\r\n  // Caching this value is nessecary if out == a\r\n  var a0 = a[0];\r\n  out[0] = a[3];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a0;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {mat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[2] * a[1];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {mat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {mat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));\r\n}\r\n\r\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {mat2} L the lower triangular matrix\r\n * @param {mat2} D the diagonal matrix\r\n * @param {mat2} U the upper triangular matrix\r\n * @param {mat2} a the input matrix to factorize\r\n */\r\n\r\nexport function LDU(L, D, U, a) {\r\n  L[2] = a[2] / a[0];\r\n  U[0] = a[0];\r\n  U[1] = a[1];\r\n  U[3] = a[3] - L[2] * U[1];\r\n  return [L, D, U];\r\n}\r\n\r\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @returns {mat2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2} a The first matrix.\r\n * @param {mat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {mat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {mat2} a the first operand\r\n * @param {mat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n *\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, c, tx,\r\n *  b, d, ty,\r\n *  0, 0, 1]\r\n * </pre>\r\n * The last row is ignored so the array is shorter and operations are faster.\r\n */\r\n\r\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[4] = 0;\r\n    out[5] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {mat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\r\nexport function fromValues(a, b, c, d, tx, ty) {\r\n  var out = new glMatrix.ARRAY_TYPE(6);\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\r\nexport function set(out, a, b, c, d, tx, ty) {\r\n  out[0] = a;\r\n  out[1] = b;\r\n  out[2] = c;\r\n  out[3] = d;\r\n  out[4] = tx;\r\n  out[5] = ty;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\r\nexport function invert(out, a) {\r\n  var aa = a[0],\r\n      ab = a[1],\r\n      ac = a[2],\r\n      ad = a[3];\r\n  var atx = a[4],\r\n      aty = a[5];\r\n\r\n  var det = aa * ad - ab * ac;\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = ad * det;\r\n  out[1] = -ab * det;\r\n  out[2] = -ac * det;\r\n  out[3] = aa * det;\r\n  out[4] = (ac * aty - ad * atx) * det;\r\n  out[5] = (ab * atx - aa * aty) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {mat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  return a[0] * a[3] - a[1] * a[2];\r\n}\r\n\r\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  out[0] = a0 * b0 + a2 * b1;\r\n  out[1] = a1 * b0 + a3 * b1;\r\n  out[2] = a0 * b2 + a2 * b3;\r\n  out[3] = a1 * b2 + a3 * b3;\r\n  out[4] = a0 * b4 + a2 * b5 + a4;\r\n  out[5] = a1 * b4 + a3 * b5 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  out[0] = a0 * c + a2 * s;\r\n  out[1] = a1 * c + a3 * s;\r\n  out[2] = a0 * -s + a2 * c;\r\n  out[3] = a1 * -s + a3 * c;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0 * v0;\r\n  out[1] = a1 * v0;\r\n  out[2] = a2 * v1;\r\n  out[3] = a3 * v1;\r\n  out[4] = a4;\r\n  out[5] = a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to translate\r\n * @param {vec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\r\nexport function translate(out, a, v) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var v0 = v[0],\r\n      v1 = v[1];\r\n  out[0] = a0;\r\n  out[1] = a1;\r\n  out[2] = a2;\r\n  out[3] = a3;\r\n  out[4] = a0 * v0 + a2 * v1 + a4;\r\n  out[5] = a1 * v0 + a3 * v1 + a5;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = -s;\r\n  out[3] = c;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = v[1];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = v[0];\r\n  out[5] = v[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {mat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {mat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);\r\n}\r\n\r\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {mat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {mat2d} a the first operand\r\n * @param {mat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat2d} a The first matrix.\r\n * @param {mat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\r\n\r\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[5] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[4] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {mat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\r\nexport function fromMat4(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[4];\r\n  out[4] = a[5];\r\n  out[5] = a[6];\r\n  out[6] = a[8];\r\n  out[7] = a[9];\r\n  out[8] = a[10];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {mat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\r\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  var out = new glMatrix.ARRAY_TYPE(9);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\r\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m10;\r\n  out[4] = m11;\r\n  out[5] = m12;\r\n  out[6] = m20;\r\n  out[7] = m21;\r\n  out[8] = m22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a12 = a[5];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a01;\r\n    out[5] = a[7];\r\n    out[6] = a02;\r\n    out[7] = a12;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[3];\r\n    out[2] = a[6];\r\n    out[3] = a[1];\r\n    out[4] = a[4];\r\n    out[5] = a[7];\r\n    out[6] = a[2];\r\n    out[7] = a[5];\r\n    out[8] = a[8];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b01 = a22 * a11 - a12 * a21;\r\n  var b11 = -a22 * a10 + a12 * a20;\r\n  var b21 = a21 * a10 - a11 * a20;\r\n\r\n  // Calculate the determinant\r\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = b01 * det;\r\n  out[1] = (-a22 * a01 + a02 * a21) * det;\r\n  out[2] = (a12 * a01 - a02 * a11) * det;\r\n  out[3] = b11 * det;\r\n  out[4] = (a22 * a00 - a02 * a20) * det;\r\n  out[5] = (-a12 * a00 + a02 * a10) * det;\r\n  out[6] = b21 * det;\r\n  out[7] = (-a21 * a00 + a01 * a20) * det;\r\n  out[8] = (a11 * a00 - a01 * a10) * det;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the source matrix\r\n * @returns {mat3} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  out[0] = a11 * a22 - a12 * a21;\r\n  out[1] = a02 * a21 - a01 * a22;\r\n  out[2] = a01 * a12 - a02 * a11;\r\n  out[3] = a12 * a20 - a10 * a22;\r\n  out[4] = a00 * a22 - a02 * a20;\r\n  out[5] = a02 * a10 - a00 * a12;\r\n  out[6] = a10 * a21 - a11 * a20;\r\n  out[7] = a01 * a20 - a00 * a21;\r\n  out[8] = a00 * a11 - a01 * a10;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {mat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\r\n}\r\n\r\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2];\r\n  var a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5];\r\n  var a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8];\r\n\r\n  var b00 = b[0],\r\n      b01 = b[1],\r\n      b02 = b[2];\r\n  var b10 = b[3],\r\n      b11 = b[4],\r\n      b12 = b[5];\r\n  var b20 = b[6],\r\n      b21 = b[7],\r\n      b22 = b[8];\r\n\r\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\r\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\r\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\r\n\r\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\r\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\r\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\r\n\r\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\r\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\r\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to translate\r\n * @param {vec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = a00;\r\n  out[1] = a01;\r\n  out[2] = a02;\r\n\r\n  out[3] = a10;\r\n  out[4] = a11;\r\n  out[5] = a12;\r\n\r\n  out[6] = x * a00 + y * a10 + a20;\r\n  out[7] = x * a01 + y * a11 + a21;\r\n  out[8] = x * a02 + y * a12 + a22;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function rotate(out, a, rad) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a10 = a[3],\r\n      a11 = a[4],\r\n      a12 = a[5],\r\n      a20 = a[6],\r\n      a21 = a[7],\r\n      a22 = a[8],\r\n      s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c * a00 + s * a10;\r\n  out[1] = c * a01 + s * a11;\r\n  out[2] = c * a02 + s * a12;\r\n\r\n  out[3] = c * a10 - s * a00;\r\n  out[4] = c * a11 - s * a01;\r\n  out[5] = c * a12 - s * a02;\r\n\r\n  out[6] = a20;\r\n  out[7] = a21;\r\n  out[8] = a22;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to rotate\r\n * @param {vec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1];\r\n\r\n  out[0] = x * a[0];\r\n  out[1] = x * a[1];\r\n  out[2] = x * a[2];\r\n\r\n  out[3] = y * a[3];\r\n  out[4] = y * a[4];\r\n  out[5] = y * a[5];\r\n\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Translation vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 1;\r\n  out[5] = 0;\r\n  out[6] = v[0];\r\n  out[7] = v[1];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\r\nexport function fromRotation(out, rad) {\r\n  var s = Math.sin(rad),\r\n      c = Math.cos(rad);\r\n\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n\r\n  out[3] = -s;\r\n  out[4] = c;\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {vec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n\r\n  out[3] = 0;\r\n  out[4] = v[1];\r\n  out[5] = 0;\r\n\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\r\nexport function fromMat2d(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = 0;\r\n\r\n  out[3] = a[2];\r\n  out[4] = a[3];\r\n  out[5] = 0;\r\n\r\n  out[6] = a[4];\r\n  out[7] = a[5];\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 matrix from the given quaternion\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {quat} q Quaternion to create matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[3] = yx - wz;\r\n  out[6] = zx + wy;\r\n\r\n  out[1] = yx + wz;\r\n  out[4] = 1 - xx - zz;\r\n  out[7] = zy - wx;\r\n\r\n  out[2] = zx - wy;\r\n  out[5] = zy + wx;\r\n  out[8] = 1 - xx - yy;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n*\r\n* @param {mat3} out mat3 receiving operation result\r\n* @param {mat4} a Mat4 to derive the normal matrix from\r\n*\r\n* @returns {mat3} out\r\n*/\r\nexport function normalFromMat4(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n\r\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n\r\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\r\nexport function projection(out, width, height) {\r\n  out[0] = 2 / width;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -2 / height;\r\n  out[5] = 0;\r\n  out[6] = -1;\r\n  out[7] = 1;\r\n  out[8] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {mat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {mat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @returns {mat3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {mat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {mat3} a the first operand\r\n * @param {mat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat3} a The first matrix.\r\n * @param {mat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7],\r\n      a8 = a[8];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7],\r\n      b8 = b[8];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\r\n\r\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n    out[4] = 0;\r\n    out[6] = 0;\r\n    out[7] = 0;\r\n    out[8] = 0;\r\n    out[9] = 0;\r\n    out[11] = 0;\r\n    out[12] = 0;\r\n    out[13] = 0;\r\n    out[14] = 0;\r\n  }\r\n  out[0] = 1;\r\n  out[5] = 1;\r\n  out[10] = 1;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {mat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  out[8] = a[8];\r\n  out[9] = a[9];\r\n  out[10] = a[10];\r\n  out[11] = a[11];\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\r\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  var out = new glMatrix.ARRAY_TYPE(16);\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\r\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\r\n  out[0] = m00;\r\n  out[1] = m01;\r\n  out[2] = m02;\r\n  out[3] = m03;\r\n  out[4] = m10;\r\n  out[5] = m11;\r\n  out[6] = m12;\r\n  out[7] = m13;\r\n  out[8] = m20;\r\n  out[9] = m21;\r\n  out[10] = m22;\r\n  out[11] = m23;\r\n  out[12] = m30;\r\n  out[13] = m31;\r\n  out[14] = m32;\r\n  out[15] = m33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function transpose(out, a) {\r\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\r\n  if (out === a) {\r\n    var a01 = a[1],\r\n        a02 = a[2],\r\n        a03 = a[3];\r\n    var a12 = a[6],\r\n        a13 = a[7];\r\n    var a23 = a[11];\r\n\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a01;\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a02;\r\n    out[9] = a12;\r\n    out[11] = a[14];\r\n    out[12] = a03;\r\n    out[13] = a13;\r\n    out[14] = a23;\r\n  } else {\r\n    out[0] = a[0];\r\n    out[1] = a[4];\r\n    out[2] = a[8];\r\n    out[3] = a[12];\r\n    out[4] = a[1];\r\n    out[5] = a[5];\r\n    out[6] = a[9];\r\n    out[7] = a[13];\r\n    out[8] = a[2];\r\n    out[9] = a[6];\r\n    out[10] = a[10];\r\n    out[11] = a[14];\r\n    out[12] = a[3];\r\n    out[13] = a[7];\r\n    out[14] = a[11];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function invert(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n\r\n  if (!det) {\r\n    return null;\r\n  }\r\n  det = 1.0 / det;\r\n\r\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\r\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\r\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\r\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\r\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\r\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\r\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\r\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\r\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\r\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\r\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\r\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\r\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\r\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\r\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\r\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the source matrix\r\n * @returns {mat4} out\r\n */\r\nexport function adjoint(out, a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\r\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\r\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\r\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\r\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\r\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\r\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\r\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\r\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\r\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\r\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\r\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\r\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\r\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\r\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\r\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {mat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\r\nexport function determinant(a) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  var b00 = a00 * a11 - a01 * a10;\r\n  var b01 = a00 * a12 - a02 * a10;\r\n  var b02 = a00 * a13 - a03 * a10;\r\n  var b03 = a01 * a12 - a02 * a11;\r\n  var b04 = a01 * a13 - a03 * a11;\r\n  var b05 = a02 * a13 - a03 * a12;\r\n  var b06 = a20 * a31 - a21 * a30;\r\n  var b07 = a20 * a32 - a22 * a30;\r\n  var b08 = a20 * a33 - a23 * a30;\r\n  var b09 = a21 * a32 - a22 * a31;\r\n  var b10 = a21 * a33 - a23 * a31;\r\n  var b11 = a22 * a33 - a23 * a32;\r\n\r\n  // Calculate the determinant\r\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\r\n}\r\n\r\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var a00 = a[0],\r\n      a01 = a[1],\r\n      a02 = a[2],\r\n      a03 = a[3];\r\n  var a10 = a[4],\r\n      a11 = a[5],\r\n      a12 = a[6],\r\n      a13 = a[7];\r\n  var a20 = a[8],\r\n      a21 = a[9],\r\n      a22 = a[10],\r\n      a23 = a[11];\r\n  var a30 = a[12],\r\n      a31 = a[13],\r\n      a32 = a[14],\r\n      a33 = a[15];\r\n\r\n  // Cache only the current line of the second matrix\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];\r\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];\r\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n\r\n  b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];\r\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\r\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\r\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\r\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n\r\n  if (a === out) {\r\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\r\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\r\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\r\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\r\n  } else {\r\n    a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n    a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n    a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n    out[0] = a00;out[1] = a01;out[2] = a02;out[3] = a03;\r\n    out[4] = a10;out[5] = a11;out[6] = a12;out[7] = a13;\r\n    out[8] = a20;out[9] = a21;out[10] = a22;out[11] = a23;\r\n\r\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\r\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\r\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\r\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {vec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\r\nexport function scale(out, a, v) {\r\n  var x = v[0],\r\n      y = v[1],\r\n      z = v[2];\r\n\r\n  out[0] = a[0] * x;\r\n  out[1] = a[1] * x;\r\n  out[2] = a[2] * x;\r\n  out[3] = a[3] * x;\r\n  out[4] = a[4] * y;\r\n  out[5] = a[5] * y;\r\n  out[6] = a[6] * y;\r\n  out[7] = a[7] * y;\r\n  out[8] = a[8] * z;\r\n  out[9] = a[9] * z;\r\n  out[10] = a[10] * z;\r\n  out[11] = a[11] * z;\r\n  out[12] = a[12];\r\n  out[13] = a[13];\r\n  out[14] = a[14];\r\n  out[15] = a[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function rotate(out, a, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n  var a00 = void 0,\r\n      a01 = void 0,\r\n      a02 = void 0,\r\n      a03 = void 0;\r\n  var a10 = void 0,\r\n      a11 = void 0,\r\n      a12 = void 0,\r\n      a13 = void 0;\r\n  var a20 = void 0,\r\n      a21 = void 0,\r\n      a22 = void 0,\r\n      a23 = void 0;\r\n  var b00 = void 0,\r\n      b01 = void 0,\r\n      b02 = void 0;\r\n  var b10 = void 0,\r\n      b11 = void 0,\r\n      b12 = void 0;\r\n  var b20 = void 0,\r\n      b21 = void 0,\r\n      b22 = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  a00 = a[0];a01 = a[1];a02 = a[2];a03 = a[3];\r\n  a10 = a[4];a11 = a[5];a12 = a[6];a13 = a[7];\r\n  a20 = a[8];a21 = a[9];a22 = a[10];a23 = a[11];\r\n\r\n  // Construct the elements of the rotation matrix\r\n  b00 = x * x * t + c;b01 = y * x * t + z * s;b02 = z * x * t - y * s;\r\n  b10 = x * y * t - z * s;b11 = y * y * t + c;b12 = z * y * t + x * s;\r\n  b20 = x * z * t + y * s;b21 = y * z * t - x * s;b22 = z * z * t + c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\r\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\r\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\r\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\r\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\r\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\r\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\r\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\r\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\r\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\r\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\r\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[0] = a[0];\r\n    out[1] = a[1];\r\n    out[2] = a[2];\r\n    out[3] = a[3];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[4] = a10 * c + a20 * s;\r\n  out[5] = a11 * c + a21 * s;\r\n  out[6] = a12 * c + a22 * s;\r\n  out[7] = a13 * c + a23 * s;\r\n  out[8] = a20 * c - a10 * s;\r\n  out[9] = a21 * c - a11 * s;\r\n  out[10] = a22 * c - a12 * s;\r\n  out[11] = a23 * c - a13 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a20 = a[8];\r\n  var a21 = a[9];\r\n  var a22 = a[10];\r\n  var a23 = a[11];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged rows\r\n    out[4] = a[4];\r\n    out[5] = a[5];\r\n    out[6] = a[6];\r\n    out[7] = a[7];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c - a20 * s;\r\n  out[1] = a01 * c - a21 * s;\r\n  out[2] = a02 * c - a22 * s;\r\n  out[3] = a03 * c - a23 * s;\r\n  out[8] = a00 * s + a20 * c;\r\n  out[9] = a01 * s + a21 * c;\r\n  out[10] = a02 * s + a22 * c;\r\n  out[11] = a03 * s + a23 * c;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n  var a00 = a[0];\r\n  var a01 = a[1];\r\n  var a02 = a[2];\r\n  var a03 = a[3];\r\n  var a10 = a[4];\r\n  var a11 = a[5];\r\n  var a12 = a[6];\r\n  var a13 = a[7];\r\n\r\n  if (a !== out) {\r\n    // If the source and destination differ, copy the unchanged last row\r\n    out[8] = a[8];\r\n    out[9] = a[9];\r\n    out[10] = a[10];\r\n    out[11] = a[11];\r\n    out[12] = a[12];\r\n    out[13] = a[13];\r\n    out[14] = a[14];\r\n    out[15] = a[15];\r\n  }\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = a00 * c + a10 * s;\r\n  out[1] = a01 * c + a11 * s;\r\n  out[2] = a02 * c + a12 * s;\r\n  out[3] = a03 * c + a13 * s;\r\n  out[4] = a10 * c - a00 * s;\r\n  out[5] = a11 * c - a01 * s;\r\n  out[6] = a12 * c - a02 * s;\r\n  out[7] = a13 * c - a03 * s;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromTranslation(out, v) {\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {vec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromScaling(out, v) {\r\n  out[0] = v[0];\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = v[1];\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = v[2];\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {vec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotation(out, rad, axis) {\r\n  var x = axis[0],\r\n      y = axis[1],\r\n      z = axis[2];\r\n  var len = Math.sqrt(x * x + y * y + z * z);\r\n  var s = void 0,\r\n      c = void 0,\r\n      t = void 0;\r\n\r\n  if (len < glMatrix.EPSILON) {\r\n    return null;\r\n  }\r\n\r\n  len = 1 / len;\r\n  x *= len;\r\n  y *= len;\r\n  z *= len;\r\n\r\n  s = Math.sin(rad);\r\n  c = Math.cos(rad);\r\n  t = 1 - c;\r\n\r\n  // Perform rotation-specific matrix multiplication\r\n  out[0] = x * x * t + c;\r\n  out[1] = y * x * t + z * s;\r\n  out[2] = z * x * t - y * s;\r\n  out[3] = 0;\r\n  out[4] = x * y * t - z * s;\r\n  out[5] = y * y * t + c;\r\n  out[6] = z * y * t + x * s;\r\n  out[7] = 0;\r\n  out[8] = x * z * t + y * s;\r\n  out[9] = y * z * t - x * s;\r\n  out[10] = z * z * t + c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromXRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = 1;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = c;\r\n  out[6] = s;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = -s;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromYRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = 0;\r\n  out[2] = -s;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = 1;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = s;\r\n  out[9] = 0;\r\n  out[10] = c;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\r\nexport function fromZRotation(out, rad) {\r\n  var s = Math.sin(rad);\r\n  var c = Math.cos(rad);\r\n\r\n  // Perform axis-specific matrix multiplication\r\n  out[0] = c;\r\n  out[1] = s;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = -s;\r\n  out[5] = c;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 1;\r\n  out[11] = 0;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslation(out, q, v) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - (yy + zz);\r\n  out[1] = xy + wz;\r\n  out[2] = xz - wy;\r\n  out[3] = 0;\r\n  out[4] = xy - wz;\r\n  out[5] = 1 - (xx + zz);\r\n  out[6] = yz + wx;\r\n  out[7] = 0;\r\n  out[8] = xz + wy;\r\n  out[9] = yz - wx;\r\n  out[10] = 1 - (xx + yy);\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {quat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\r\nexport function fromQuat2(out, a) {\r\n  var translation = new glMatrix.ARRAY_TYPE(3);\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n\r\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw;\r\n  //Only scale if it makes sense\r\n  if (magnitude > 0) {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\r\n  } else {\r\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  }\r\n  fromRotationTranslation(out, a, translation);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getTranslation(out, mat) {\r\n  out[0] = mat[12];\r\n  out[1] = mat[13];\r\n  out[2] = mat[14];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {mat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\r\nexport function getScaling(out, mat) {\r\n  var m11 = mat[0];\r\n  var m12 = mat[1];\r\n  var m13 = mat[2];\r\n  var m21 = mat[4];\r\n  var m22 = mat[5];\r\n  var m23 = mat[6];\r\n  var m31 = mat[8];\r\n  var m32 = mat[9];\r\n  var m33 = mat[10];\r\n\r\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\r\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\r\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {mat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\r\nexport function getRotation(out, mat) {\r\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n  var trace = mat[0] + mat[5] + mat[10];\r\n  var S = 0;\r\n\r\n  if (trace > 0) {\r\n    S = Math.sqrt(trace + 1.0) * 2;\r\n    out[3] = 0.25 * S;\r\n    out[0] = (mat[6] - mat[9]) / S;\r\n    out[1] = (mat[8] - mat[2]) / S;\r\n    out[2] = (mat[1] - mat[4]) / S;\r\n  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\r\n    out[3] = (mat[6] - mat[9]) / S;\r\n    out[0] = 0.25 * S;\r\n    out[1] = (mat[1] + mat[4]) / S;\r\n    out[2] = (mat[8] + mat[2]) / S;\r\n  } else if (mat[5] > mat[10]) {\r\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\r\n    out[3] = (mat[8] - mat[2]) / S;\r\n    out[0] = (mat[1] + mat[4]) / S;\r\n    out[1] = 0.25 * S;\r\n    out[2] = (mat[6] + mat[9]) / S;\r\n  } else {\r\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\r\n    out[3] = (mat[1] - mat[4]) / S;\r\n    out[0] = (mat[8] + mat[2]) / S;\r\n    out[1] = (mat[6] + mat[9]) / S;\r\n    out[2] = 0.25 * S;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScale(out, q, v, s) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  out[0] = (1 - (yy + zz)) * sx;\r\n  out[1] = (xy + wz) * sx;\r\n  out[2] = (xz - wy) * sx;\r\n  out[3] = 0;\r\n  out[4] = (xy - wz) * sy;\r\n  out[5] = (1 - (xx + zz)) * sy;\r\n  out[6] = (yz + wx) * sy;\r\n  out[7] = 0;\r\n  out[8] = (xz + wy) * sz;\r\n  out[9] = (yz - wx) * sz;\r\n  out[10] = (1 - (xx + yy)) * sz;\r\n  out[11] = 0;\r\n  out[12] = v[0];\r\n  out[13] = v[1];\r\n  out[14] = v[2];\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {vec3} v Translation vector\r\n * @param {vec3} s Scaling vector\r\n * @param {vec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\r\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\r\n  // Quaternion math\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var xy = x * y2;\r\n  var xz = x * z2;\r\n  var yy = y * y2;\r\n  var yz = y * z2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  var sx = s[0];\r\n  var sy = s[1];\r\n  var sz = s[2];\r\n\r\n  var ox = o[0];\r\n  var oy = o[1];\r\n  var oz = o[2];\r\n\r\n  var out0 = (1 - (yy + zz)) * sx;\r\n  var out1 = (xy + wz) * sx;\r\n  var out2 = (xz - wy) * sx;\r\n  var out4 = (xy - wz) * sy;\r\n  var out5 = (1 - (xx + zz)) * sy;\r\n  var out6 = (yz + wx) * sy;\r\n  var out8 = (xz + wy) * sz;\r\n  var out9 = (yz - wx) * sz;\r\n  var out10 = (1 - (xx + yy)) * sz;\r\n\r\n  out[0] = out0;\r\n  out[1] = out1;\r\n  out[2] = out2;\r\n  out[3] = 0;\r\n  out[4] = out4;\r\n  out[5] = out5;\r\n  out[6] = out6;\r\n  out[7] = 0;\r\n  out[8] = out8;\r\n  out[9] = out9;\r\n  out[10] = out10;\r\n  out[11] = 0;\r\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\r\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\r\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\r\nexport function fromQuat(out, q) {\r\n  var x = q[0],\r\n      y = q[1],\r\n      z = q[2],\r\n      w = q[3];\r\n  var x2 = x + x;\r\n  var y2 = y + y;\r\n  var z2 = z + z;\r\n\r\n  var xx = x * x2;\r\n  var yx = y * x2;\r\n  var yy = y * y2;\r\n  var zx = z * x2;\r\n  var zy = z * y2;\r\n  var zz = z * z2;\r\n  var wx = w * x2;\r\n  var wy = w * y2;\r\n  var wz = w * z2;\r\n\r\n  out[0] = 1 - yy - zz;\r\n  out[1] = yx + wz;\r\n  out[2] = zx - wy;\r\n  out[3] = 0;\r\n\r\n  out[4] = yx - wz;\r\n  out[5] = 1 - xx - zz;\r\n  out[6] = zy + wx;\r\n  out[7] = 0;\r\n\r\n  out[8] = zx + wy;\r\n  out[9] = zy - wx;\r\n  out[10] = 1 - xx - yy;\r\n  out[11] = 0;\r\n\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = 0;\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function frustum(out, left, right, bottom, top, near, far) {\r\n  var rl = 1 / (right - left);\r\n  var tb = 1 / (top - bottom);\r\n  var nf = 1 / (near - far);\r\n  out[0] = near * 2 * rl;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = near * 2 * tb;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = (right + left) * rl;\r\n  out[9] = (top + bottom) * tb;\r\n  out[10] = (far + near) * nf;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[14] = far * near * 2 * nf;\r\n  out[15] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\r\nexport function perspective(out, fovy, aspect, near, far) {\r\n  var f = 1.0 / Math.tan(fovy / 2),\r\n      nf = void 0;\r\n  out[0] = f / aspect;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = f;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[11] = -1;\r\n  out[12] = 0;\r\n  out[13] = 0;\r\n  out[15] = 0;\r\n  if (far != null && far !== Infinity) {\r\n    nf = 1 / (near - far);\r\n    out[10] = (far + near) * nf;\r\n    out[14] = 2 * far * near * nf;\r\n  } else {\r\n    out[10] = -1;\r\n    out[14] = -2 * near;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\r\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\r\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\r\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\r\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\r\n  var xScale = 2.0 / (leftTan + rightTan);\r\n  var yScale = 2.0 / (upTan + downTan);\r\n\r\n  out[0] = xScale;\r\n  out[1] = 0.0;\r\n  out[2] = 0.0;\r\n  out[3] = 0.0;\r\n  out[4] = 0.0;\r\n  out[5] = yScale;\r\n  out[6] = 0.0;\r\n  out[7] = 0.0;\r\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\r\n  out[9] = (upTan - downTan) * yScale * 0.5;\r\n  out[10] = far / (near - far);\r\n  out[11] = -1.0;\r\n  out[12] = 0.0;\r\n  out[13] = 0.0;\r\n  out[14] = far * near / (near - far);\r\n  out[15] = 0.0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\r\nexport function ortho(out, left, right, bottom, top, near, far) {\r\n  var lr = 1 / (left - right);\r\n  var bt = 1 / (bottom - top);\r\n  var nf = 1 / (near - far);\r\n  out[0] = -2 * lr;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 0;\r\n  out[4] = 0;\r\n  out[5] = -2 * bt;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  out[8] = 0;\r\n  out[9] = 0;\r\n  out[10] = 2 * nf;\r\n  out[11] = 0;\r\n  out[12] = (left + right) * lr;\r\n  out[13] = (top + bottom) * bt;\r\n  out[14] = (far + near) * nf;\r\n  out[15] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function lookAt(out, eye, center, up) {\r\n  var x0 = void 0,\r\n      x1 = void 0,\r\n      x2 = void 0,\r\n      y0 = void 0,\r\n      y1 = void 0,\r\n      y2 = void 0,\r\n      z0 = void 0,\r\n      z1 = void 0,\r\n      z2 = void 0,\r\n      len = void 0;\r\n  var eyex = eye[0];\r\n  var eyey = eye[1];\r\n  var eyez = eye[2];\r\n  var upx = up[0];\r\n  var upy = up[1];\r\n  var upz = up[2];\r\n  var centerx = center[0];\r\n  var centery = center[1];\r\n  var centerz = center[2];\r\n\r\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\r\n    return identity(out);\r\n  }\r\n\r\n  z0 = eyex - centerx;\r\n  z1 = eyey - centery;\r\n  z2 = eyez - centerz;\r\n\r\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\r\n  z0 *= len;\r\n  z1 *= len;\r\n  z2 *= len;\r\n\r\n  x0 = upy * z2 - upz * z1;\r\n  x1 = upz * z0 - upx * z2;\r\n  x2 = upx * z1 - upy * z0;\r\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\r\n  if (!len) {\r\n    x0 = 0;\r\n    x1 = 0;\r\n    x2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  y0 = z1 * x2 - z2 * x1;\r\n  y1 = z2 * x0 - z0 * x2;\r\n  y2 = z0 * x1 - z1 * x0;\r\n\r\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\r\n  if (!len) {\r\n    y0 = 0;\r\n    y1 = 0;\r\n    y2 = 0;\r\n  } else {\r\n    len = 1 / len;\r\n    y0 *= len;\r\n    y1 *= len;\r\n    y2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = y0;\r\n  out[2] = z0;\r\n  out[3] = 0;\r\n  out[4] = x1;\r\n  out[5] = y1;\r\n  out[6] = z1;\r\n  out[7] = 0;\r\n  out[8] = x2;\r\n  out[9] = y2;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\r\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\r\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\r\n  out[15] = 1;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {vec3} eye Position of the viewer\r\n * @param {vec3} center Point the viewer is looking at\r\n * @param {vec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\r\nexport function targetTo(out, eye, target, up) {\r\n  var eyex = eye[0],\r\n      eyey = eye[1],\r\n      eyez = eye[2],\r\n      upx = up[0],\r\n      upy = up[1],\r\n      upz = up[2];\r\n\r\n  var z0 = eyex - target[0],\r\n      z1 = eyey - target[1],\r\n      z2 = eyez - target[2];\r\n\r\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    z0 *= len;\r\n    z1 *= len;\r\n    z2 *= len;\r\n  }\r\n\r\n  var x0 = upy * z2 - upz * z1,\r\n      x1 = upz * z0 - upx * z2,\r\n      x2 = upx * z1 - upy * z0;\r\n\r\n  len = x0 * x0 + x1 * x1 + x2 * x2;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    x0 *= len;\r\n    x1 *= len;\r\n    x2 *= len;\r\n  }\r\n\r\n  out[0] = x0;\r\n  out[1] = x1;\r\n  out[2] = x2;\r\n  out[3] = 0;\r\n  out[4] = z1 * x2 - z2 * x1;\r\n  out[5] = z2 * x0 - z0 * x2;\r\n  out[6] = z0 * x1 - z1 * x0;\r\n  out[7] = 0;\r\n  out[8] = z0;\r\n  out[9] = z1;\r\n  out[10] = z2;\r\n  out[11] = 0;\r\n  out[12] = eyex;\r\n  out[13] = eyey;\r\n  out[14] = eyez;\r\n  out[15] = 1;\r\n  return out;\r\n};\r\n\r\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {mat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\r\nexport function str(a) {\r\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\r\n}\r\n\r\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {mat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\r\nexport function frob(a) {\r\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));\r\n}\r\n\r\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  out[8] = a[8] + b[8];\r\n  out[9] = a[9] + b[9];\r\n  out[10] = a[10] + b[10];\r\n  out[11] = a[11] + b[11];\r\n  out[12] = a[12] + b[12];\r\n  out[13] = a[13] + b[13];\r\n  out[14] = a[14] + b[14];\r\n  out[15] = a[15] + b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @returns {mat4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  out[4] = a[4] - b[4];\r\n  out[5] = a[5] - b[5];\r\n  out[6] = a[6] - b[6];\r\n  out[7] = a[7] - b[7];\r\n  out[8] = a[8] - b[8];\r\n  out[9] = a[9] - b[9];\r\n  out[10] = a[10] - b[10];\r\n  out[11] = a[11] - b[11];\r\n  out[12] = a[12] - b[12];\r\n  out[13] = a[13] - b[13];\r\n  out[14] = a[14] - b[14];\r\n  out[15] = a[15] - b[15];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {mat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalar(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  out[8] = a[8] * b;\r\n  out[9] = a[9] * b;\r\n  out[10] = a[10] * b;\r\n  out[11] = a[11] * b;\r\n  out[12] = a[12] * b;\r\n  out[13] = a[13] * b;\r\n  out[14] = a[14] * b;\r\n  out[15] = a[15] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {mat4} a the first operand\r\n * @param {mat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\r\nexport function multiplyScalarAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  out[4] = a[4] + b[4] * scale;\r\n  out[5] = a[5] + b[5] * scale;\r\n  out[6] = a[6] + b[6] * scale;\r\n  out[7] = a[7] + b[7] * scale;\r\n  out[8] = a[8] + b[8] * scale;\r\n  out[9] = a[9] + b[9] * scale;\r\n  out[10] = a[10] + b[10] * scale;\r\n  out[11] = a[11] + b[11] * scale;\r\n  out[12] = a[12] + b[12] * scale;\r\n  out[13] = a[13] + b[13] * scale;\r\n  out[14] = a[14] + b[14] * scale;\r\n  out[15] = a[15] + b[15] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\r\n}\r\n\r\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {mat4} a The first matrix.\r\n * @param {mat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var a8 = a[8],\r\n      a9 = a[9],\r\n      a10 = a[10],\r\n      a11 = a[11];\r\n  var a12 = a[12],\r\n      a13 = a[13],\r\n      a14 = a[14],\r\n      a15 = a[15];\r\n\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  var b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  var b8 = b[8],\r\n      b9 = b[9],\r\n      b10 = b[10],\r\n      b11 = b[11];\r\n  var b12 = b[12],\r\n      b13 = b[13],\r\n      b14 = b[14],\r\n      b15 = b[15];\r\n\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\r\n}\r\n\r\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {vec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\r\nexport function fromValues(x, y, z) {\r\n  var out = new glMatrix.ARRAY_TYPE(3);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the source vector\r\n * @returns {vec3} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\r\nexport function set(out, x, y, z) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to floor\r\n * @returns {vec3} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to round\r\n * @returns {vec3} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return Math.sqrt(x * x + y * y + z * z);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {vec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  return x * x + y * y + z * z;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to negate\r\n * @returns {vec3} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to invert\r\n * @returns {vec3} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var len = x * x + y * y + z * z;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n    out[2] = a[2] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2];\r\n\r\n  out[0] = ay * bz - az * by;\r\n  out[1] = az * bx - ax * bz;\r\n  out[2] = ax * by - ay * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function hermite(out, a, b, c, d, t) {\r\n  var factorTimes2 = t * t;\r\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\r\n  var factor2 = factorTimes2 * (t - 2) + t;\r\n  var factor3 = factorTimes2 * (t - 1);\r\n  var factor4 = factorTimes2 * (3 - 2 * t);\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the first operand\r\n * @param {vec3} b the second operand\r\n * @param {vec3} c the third operand\r\n * @param {vec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\r\nexport function bezier(out, a, b, c, d, t) {\r\n  var inverseFactor = 1 - t;\r\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\r\n  var factorTimes2 = t * t;\r\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\r\n  var factor2 = 3 * t * inverseFactorTimesTwo;\r\n  var factor3 = 3 * factorTimes2 * inverseFactor;\r\n  var factor4 = factorTimes2 * t;\r\n\r\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\r\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\r\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\r\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\r\n\r\n  out[0] = Math.cos(r) * zScale;\r\n  out[1] = Math.sin(r) * zScale;\r\n  out[2] = z * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\r\n  w = w || 1.0;\r\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\r\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\r\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {mat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  out[0] = x * m[0] + y * m[3] + z * m[6];\r\n  out[1] = x * m[1] + y * m[4] + z * m[7];\r\n  out[2] = x * m[2] + y * m[5] + z * m[8];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec3} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  // var qvec = [qx, qy, qz];\r\n  // var uv = vec3.cross([], qvec, a);\r\n  var uvx = qy * z - qz * y,\r\n      uvy = qz * x - qx * z,\r\n      uvz = qx * y - qy * x;\r\n  // var uuv = vec3.cross([], qvec, uv);\r\n  var uuvx = qy * uvz - qz * uvy,\r\n      uuvy = qz * uvx - qx * uvz,\r\n      uuvz = qx * uvy - qy * uvx;\r\n  // vec3.scale(uv, uv, 2 * w);\r\n  var w2 = qw * 2;\r\n  uvx *= w2;\r\n  uvy *= w2;\r\n  uvz *= w2;\r\n  // vec3.scale(uuv, uuv, 2);\r\n  uuvx *= 2;\r\n  uuvy *= 2;\r\n  uuvz *= 2;\r\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\r\n  out[0] = x + uvx + uuvx;\r\n  out[1] = y + uvy + uuvy;\r\n  out[2] = z + uvz + uuvz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateX(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0];\r\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\r\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateY(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\r\n  r[1] = p[1];\r\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {vec3} a The vec3 point to rotate\r\n * @param {vec3} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec3} out\r\n */\r\nexport function rotateZ(out, a, b, c) {\r\n  var p = [],\r\n      r = [];\r\n  //Translate point to the origin\r\n  p[0] = a[0] - b[0];\r\n  p[1] = a[1] - b[1];\r\n  p[2] = a[2] - b[2];\r\n\r\n  //perform rotation\r\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\r\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\r\n  r[2] = p[2];\r\n\r\n  //translate to correct position\r\n  out[0] = r[0] + b[0];\r\n  out[1] = r[1] + b[1];\r\n  out[2] = r[2] + b[2];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {vec3} a The first operand\r\n * @param {vec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var tempA = fromValues(a[0], a[1], a[2]);\r\n  var tempB = fromValues(b[0], b[1], b[2]);\r\n\r\n  normalize(tempA, tempA);\r\n  normalize(tempB, tempB);\r\n\r\n  var cosine = dot(tempA, tempB);\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec3} a The first vector.\r\n * @param {vec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 3;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n    out[3] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {vec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\r\nexport function fromValues(x, y, z, w) {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the source vector\r\n * @returns {vec4} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\r\nexport function set(out, x, y, z, w) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  out[2] = a[2] - b[2];\r\n  out[3] = a[3] - b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  out[2] = a[2] * b[2];\r\n  out[3] = a[3] * b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  out[2] = a[2] / b[2];\r\n  out[3] = a[3] / b[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  out[2] = Math.ceil(a[2]);\r\n  out[3] = Math.ceil(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to floor\r\n * @returns {vec4} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  out[2] = Math.floor(a[2]);\r\n  out[3] = Math.floor(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  out[2] = Math.min(a[2], b[2]);\r\n  out[3] = Math.min(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {vec4} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  out[2] = Math.max(a[2], b[2]);\r\n  out[3] = Math.max(a[3], b[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to round\r\n * @returns {vec4} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  out[2] = Math.round(a[2]);\r\n  out[3] = Math.round(a[3]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  out[2] = a[2] + b[2] * scale;\r\n  out[3] = a[3] + b[3] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0];\r\n  var y = b[1] - a[1];\r\n  var z = b[2] - a[2];\r\n  var w = b[3] - a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return Math.sqrt(x * x + y * y + z * z + w * w);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {vec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  return x * x + y * y + z * z + w * w;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to negate\r\n * @returns {vec4} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = -a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to invert\r\n * @returns {vec4} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  out[2] = 1.0 / a[2];\r\n  out[3] = 1.0 / a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  var z = a[2];\r\n  var w = a[3];\r\n  var len = x * x + y * y + z * z + w * w;\r\n  if (len > 0) {\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = x * len;\r\n    out[1] = y * len;\r\n    out[2] = z * len;\r\n    out[3] = w * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the first operand\r\n * @param {vec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0];\r\n  var ay = a[1];\r\n  var az = a[2];\r\n  var aw = a[3];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  out[2] = az + t * (b[2] - az);\r\n  out[3] = aw + t * (b[3] - aw);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n\r\n  // Marsaglia, George. Choosing a Point from the Surface of a\r\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\r\n  // http://projecteuclid.org/euclid.aoms/1177692644;\r\n  var v1, v2, v3, v4;\r\n  var s1, s2;\r\n  do {\r\n    v1 = glMatrix.RANDOM() * 2 - 1;\r\n    v2 = glMatrix.RANDOM() * 2 - 1;\r\n    s1 = v1 * v1 + v2 * v2;\r\n  } while (s1 >= 1);\r\n  do {\r\n    v3 = glMatrix.RANDOM() * 2 - 1;\r\n    v4 = glMatrix.RANDOM() * 2 - 1;\r\n    s2 = v3 * v3 + v4 * v4;\r\n  } while (s2 >= 1);\r\n\r\n  var d = Math.sqrt((1 - s1) / s2);\r\n  out[0] = scale * v1;\r\n  out[1] = scale * v2;\r\n  out[2] = scale * v3 * d;\r\n  out[3] = scale * v4 * d;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2],\r\n      w = a[3];\r\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\r\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\r\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\r\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {vec4} a the vector to transform\r\n * @param {quat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\r\nexport function transformQuat(out, a, q) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3];\r\n\r\n  // calculate quat * vec\r\n  var ix = qw * x + qy * z - qz * y;\r\n  var iy = qw * y + qz * x - qx * z;\r\n  var iz = qw * z + qx * y - qy * x;\r\n  var iw = -qx * x - qy * y - qz * z;\r\n\r\n  // calculate result * inverse quat\r\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec4} a The first vector.\r\n * @param {vec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 4;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];vec[3] = a[i + 3];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];a[i + 3] = vec[3];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as mat3 from \"./mat3.js\";\r\nimport * as vec3 from \"./vec3.js\";\r\nimport * as vec4 from \"./vec4.js\";\r\n\r\n/**\r\n * Quaternion\r\n * @module quat\r\n */\r\n\r\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(4);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n    out[2] = 0;\r\n  }\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {vec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\r\nexport function setAxisAngle(out, axis, rad) {\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  out[0] = s * axis[0];\r\n  out[1] = s * axis[1];\r\n  out[2] = s * axis[2];\r\n  out[3] = Math.cos(rad);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {quat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\r\nexport function getAxisAngle(out_axis, q) {\r\n  var rad = Math.acos(q[3]) * 2.0;\r\n  var s = Math.sin(rad / 2.0);\r\n  if (s > glMatrix.EPSILON) {\r\n    out_axis[0] = q[0] / s;\r\n    out_axis[1] = q[1] / s;\r\n    out_axis[2] = q[2] / s;\r\n  } else {\r\n    // If s is zero, return any axis (no rotation - axis does not matter)\r\n    out_axis[0] = 1;\r\n    out_axis[1] = 0;\r\n    out_axis[2] = 0;\r\n  }\r\n  return rad;\r\n}\r\n\r\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + aw * bx;\r\n  out[1] = ay * bw + az * bx;\r\n  out[2] = az * bw - ay * bx;\r\n  out[3] = aw * bw - ax * bx;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var by = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw - az * by;\r\n  out[1] = ay * bw + aw * by;\r\n  out[2] = az * bw + ax * by;\r\n  out[3] = aw * bw - ay * by;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {quat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  rad *= 0.5;\r\n\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bz = Math.sin(rad),\r\n      bw = Math.cos(rad);\r\n\r\n  out[0] = ax * bw + ay * bz;\r\n  out[1] = ay * bw - ax * bz;\r\n  out[2] = az * bw + aw * bz;\r\n  out[3] = aw * bw - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\r\nexport function calculateW(out, a) {\r\n  var x = a[0],\r\n      y = a[1],\r\n      z = a[2];\r\n\r\n  out[0] = x;\r\n  out[1] = y;\r\n  out[2] = z;\r\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport function slerp(out, a, b, t) {\r\n  // benchmarks:\r\n  //    http://jsperf.com/quaternion-slerp-implementations\r\n  var ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n  var bx = b[0],\r\n      by = b[1],\r\n      bz = b[2],\r\n      bw = b[3];\r\n\r\n  var omega = void 0,\r\n      cosom = void 0,\r\n      sinom = void 0,\r\n      scale0 = void 0,\r\n      scale1 = void 0;\r\n\r\n  // calc cosine\r\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n  // adjust signs (if necessary)\r\n  if (cosom < 0.0) {\r\n    cosom = -cosom;\r\n    bx = -bx;\r\n    by = -by;\r\n    bz = -bz;\r\n    bw = -bw;\r\n  }\r\n  // calculate coefficients\r\n  if (1.0 - cosom > glMatrix.EPSILON) {\r\n    // standard case (slerp)\r\n    omega = Math.acos(cosom);\r\n    sinom = Math.sin(omega);\r\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n    scale1 = Math.sin(t * omega) / sinom;\r\n  } else {\r\n    // \"from\" and \"to\" quaternions are very close\r\n    //  ... so we can do a linear interpolation\r\n    scale0 = 1.0 - t;\r\n    scale1 = t;\r\n  }\r\n  // calculate final values\r\n  out[0] = scale0 * ax + scale1 * bx;\r\n  out[1] = scale0 * ay + scale1 * by;\r\n  out[2] = scale0 * az + scale1 * bz;\r\n  out[3] = scale0 * aw + scale1 * bw;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\r\nexport function random(out) {\r\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\r\n  // TODO: Calling random 3 times is probably not the fastest solution\r\n  var u1 = glMatrix.RANDOM();\r\n  var u2 = glMatrix.RANDOM();\r\n  var u3 = glMatrix.RANDOM();\r\n\r\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\r\n  var sqrtU1 = Math.sqrt(u1);\r\n\r\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\r\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\r\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\r\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\r\nexport function invert(out, a) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3];\r\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\r\n  var invDot = dot ? 1.0 / dot : 0;\r\n\r\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\r\n\r\n  out[0] = -a0 * invDot;\r\n  out[1] = -a1 * invDot;\r\n  out[2] = -a2 * invDot;\r\n  out[3] = a3 * invDot;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {mat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromMat3(out, m) {\r\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\r\n  // article \"Quaternion Calculus and Fast Animation\".\r\n  var fTrace = m[0] + m[4] + m[8];\r\n  var fRoot = void 0;\r\n\r\n  if (fTrace > 0.0) {\r\n    // |w| > 1/2, may as well choose w > 1/2\r\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\r\n    out[3] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot; // 1/(4w)\r\n    out[0] = (m[5] - m[7]) * fRoot;\r\n    out[1] = (m[6] - m[2]) * fRoot;\r\n    out[2] = (m[1] - m[3]) * fRoot;\r\n  } else {\r\n    // |w| <= 1/2\r\n    var i = 0;\r\n    if (m[4] > m[0]) i = 1;\r\n    if (m[8] > m[i * 3 + i]) i = 2;\r\n    var j = (i + 1) % 3;\r\n    var k = (i + 2) % 3;\r\n\r\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\r\n    out[i] = 0.5 * fRoot;\r\n    fRoot = 0.5 / fRoot;\r\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\r\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\r\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport function fromEuler(out, x, y, z) {\r\n  var halfToRad = 0.5 * Math.PI / 180.0;\r\n  x *= halfToRad;\r\n  y *= halfToRad;\r\n  z *= halfToRad;\r\n\r\n  var sx = Math.sin(x);\r\n  var cx = Math.cos(x);\r\n  var sy = Math.sin(y);\r\n  var cy = Math.cos(y);\r\n  var sz = Math.sin(z);\r\n  var cz = Math.cos(z);\r\n\r\n  out[0] = sx * cy * cz - cx * sy * sz;\r\n  out[1] = cx * sy * cz + sx * cy * sz;\r\n  out[2] = cx * cy * sz - sx * sy * cz;\r\n  out[3] = cx * cy * cz + sx * sy * sz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {quat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var clone = vec4.clone;\r\n\r\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\r\nexport var fromValues = vec4.fromValues;\r\n\r\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var copy = vec4.copy;\r\n\r\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var set = vec4.set;\r\n\r\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var add = vec4.add;\r\n\r\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {quat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var scale = vec4.scale;\r\n\r\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = vec4.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var lerp = vec4.lerp;\r\n\r\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {quat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport var length = vec4.length;\r\n\r\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {quat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = vec4.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\r\nexport var normalize = vec4.normalize;\r\n\r\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat} a The first quaternion.\r\n * @param {quat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var exactEquals = vec4.exactEquals;\r\n\r\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat} a The first vector.\r\n * @param {quat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport var equals = vec4.equals;\r\n\r\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {vec3} a the initial vector\r\n * @param {vec3} b the destination vector\r\n * @returns {quat} out\r\n */\r\nexport var rotationTo = function () {\r\n  var tmpvec3 = vec3.create();\r\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\r\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\r\n\r\n  return function (out, a, b) {\r\n    var dot = vec3.dot(a, b);\r\n    if (dot < -0.999999) {\r\n      vec3.cross(tmpvec3, xUnitVec3, a);\r\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\r\n      vec3.normalize(tmpvec3, tmpvec3);\r\n      setAxisAngle(out, tmpvec3, Math.PI);\r\n      return out;\r\n    } else if (dot > 0.999999) {\r\n      out[0] = 0;\r\n      out[1] = 0;\r\n      out[2] = 0;\r\n      out[3] = 1;\r\n      return out;\r\n    } else {\r\n      vec3.cross(tmpvec3, a, b);\r\n      out[0] = tmpvec3[0];\r\n      out[1] = tmpvec3[1];\r\n      out[2] = tmpvec3[2];\r\n      out[3] = 1 + dot;\r\n      return normalize(out, out);\r\n    }\r\n  };\r\n}();\r\n\r\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {quat} a the first operand\r\n * @param {quat} b the second operand\r\n * @param {quat} c the third operand\r\n * @param {quat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\r\nexport var sqlerp = function () {\r\n  var temp1 = create();\r\n  var temp2 = create();\r\n\r\n  return function (out, a, b, c, d, t) {\r\n    slerp(temp1, a, d, t);\r\n    slerp(temp2, b, c, t);\r\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\r\n\r\n    return out;\r\n  };\r\n}();\r\n\r\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {vec3} view  the vector representing the viewing direction\r\n * @param {vec3} right the vector representing the local \"right\" direction\r\n * @param {vec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\r\nexport var setAxes = function () {\r\n  var matr = mat3.create();\r\n\r\n  return function (out, view, right, up) {\r\n    matr[0] = right[0];\r\n    matr[3] = right[1];\r\n    matr[6] = right[2];\r\n\r\n    matr[1] = up[0];\r\n    matr[4] = up[1];\r\n    matr[7] = up[2];\r\n\r\n    matr[2] = -view[0];\r\n    matr[5] = -view[1];\r\n    matr[8] = -view[2];\r\n\r\n    return normalize(out, fromMat3(out, matr));\r\n  };\r\n}();","import * as glMatrix from \"./common.js\";\r\nimport * as quat from \"./quat.js\";\r\nimport * as mat4 from \"./mat4.js\";\r\n\r\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\r\n\r\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\r\nexport function create() {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    dq[0] = 0;\r\n    dq[1] = 0;\r\n    dq[2] = 0;\r\n    dq[4] = 0;\r\n    dq[5] = 0;\r\n    dq[6] = 0;\r\n    dq[7] = 0;\r\n  }\r\n  dq[3] = 1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {quat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function clone(a) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = a[0];\r\n  dq[1] = a[1];\r\n  dq[2] = a[2];\r\n  dq[3] = a[3];\r\n  dq[4] = a[4];\r\n  dq[5] = a[5];\r\n  dq[6] = a[6];\r\n  dq[7] = a[7];\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  dq[4] = x2;\r\n  dq[5] = y2;\r\n  dq[6] = z2;\r\n  dq[7] = w2;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\r\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\r\n  var dq = new glMatrix.ARRAY_TYPE(8);\r\n  dq[0] = x1;\r\n  dq[1] = y1;\r\n  dq[2] = z1;\r\n  dq[3] = w1;\r\n  var ax = x2 * 0.5,\r\n      ay = y2 * 0.5,\r\n      az = z2 * 0.5;\r\n  dq[4] = ax * w1 + ay * z1 - az * y1;\r\n  dq[5] = ay * w1 + az * x1 - ax * z1;\r\n  dq[6] = az * w1 + ax * y1 - ay * x1;\r\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\r\n  return dq;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q quaternion\r\n * @param {vec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotationTranslation(out, q, t) {\r\n  var ax = t[0] * 0.5,\r\n      ay = t[1] * 0.5,\r\n      az = t[2] * 0.5,\r\n      bx = q[0],\r\n      by = q[1],\r\n      bz = q[2],\r\n      bw = q[3];\r\n  out[0] = bx;\r\n  out[1] = by;\r\n  out[2] = bz;\r\n  out[3] = bw;\r\n  out[4] = ax * bw + ay * bz - az * by;\r\n  out[5] = ay * bw + az * bx - ax * bz;\r\n  out[6] = az * bw + ax * by - ay * bx;\r\n  out[7] = -ax * bx - ay * by - az * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {vec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromTranslation(out, t) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = t[0] * 0.5;\r\n  out[5] = t[1] * 0.5;\r\n  out[6] = t[2] * 0.5;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {quat2} dual quaternion receiving operation result\r\n * @param {quat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\r\nexport function fromRotation(out, q) {\r\n  out[0] = q[0];\r\n  out[1] = q[1];\r\n  out[2] = q[2];\r\n  out[3] = q[3];\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {mat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\r\nexport function fromMat4(out, a) {\r\n  //TODO Optimize this\r\n  var outer = quat.create();\r\n  mat4.getRotation(outer, a);\r\n  var t = new glMatrix.ARRAY_TYPE(3);\r\n  mat4.getTranslation(t, a);\r\n  fromRotationTranslation(out, outer, t);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  out[2] = a[2];\r\n  out[3] = a[3];\r\n  out[4] = a[4];\r\n  out[5] = a[5];\r\n  out[6] = a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\r\nexport function identity(out) {\r\n  out[0] = 0;\r\n  out[1] = 0;\r\n  out[2] = 0;\r\n  out[3] = 1;\r\n  out[4] = 0;\r\n  out[5] = 0;\r\n  out[6] = 0;\r\n  out[7] = 0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\r\n  out[0] = x1;\r\n  out[1] = y1;\r\n  out[2] = z1;\r\n  out[3] = w1;\r\n\r\n  out[4] = x2;\r\n  out[5] = y2;\r\n  out[6] = z2;\r\n  out[7] = w2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\r\nexport var getReal = quat.copy;\r\n\r\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {quat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\r\nexport function getDual(out, a) {\r\n  out[0] = a[4];\r\n  out[1] = a[5];\r\n  out[2] = a[6];\r\n  out[3] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport var setReal = quat.copy;\r\n\r\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function setDual(out, q) {\r\n  out[4] = q[0];\r\n  out[5] = q[1];\r\n  out[6] = q[2];\r\n  out[7] = q[3];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {quat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\r\nexport function getTranslation(out, a) {\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3];\r\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\r\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\r\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to translate\r\n * @param {vec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\r\nexport function translate(out, a, v) {\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3],\r\n      bx1 = v[0] * 0.5,\r\n      by1 = v[1] * 0.5,\r\n      bz1 = v[2] * 0.5,\r\n      ax2 = a[4],\r\n      ay2 = a[5],\r\n      az2 = a[6],\r\n      aw2 = a[7];\r\n  out[0] = ax1;\r\n  out[1] = ay1;\r\n  out[2] = az1;\r\n  out[3] = aw1;\r\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\r\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\r\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\r\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateX(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateX(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateY(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateY(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateZ(out, a, rad) {\r\n  var bx = -a[0],\r\n      by = -a[1],\r\n      bz = -a[2],\r\n      bw = a[3],\r\n      ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7],\r\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\r\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\r\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\r\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\r\n  quat.rotateZ(out, a, rad);\r\n  bx = out[0];\r\n  by = out[1];\r\n  bz = out[2];\r\n  bw = out[3];\r\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {quat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatAppend(out, a, q) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      ax = a[0],\r\n      ay = a[1],\r\n      az = a[2],\r\n      aw = a[3];\r\n\r\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  ax = a[4];\r\n  ay = a[5];\r\n  az = a[6];\r\n  aw = a[7];\r\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\r\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\r\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\r\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat} q quaternion to rotate by\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\r\nexport function rotateByQuatPrepend(out, q, a) {\r\n  var qx = q[0],\r\n      qy = q[1],\r\n      qz = q[2],\r\n      qw = q[3],\r\n      bx = a[0],\r\n      by = a[1],\r\n      bz = a[2],\r\n      bw = a[3];\r\n\r\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  bx = a[4];\r\n  by = a[5];\r\n  bz = a[6];\r\n  bw = a[7];\r\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\r\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\r\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\r\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the dual quaternion to rotate\r\n * @param {vec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\r\nexport function rotateAroundAxis(out, a, axis, rad) {\r\n  //Special case for rad = 0\r\n  if (Math.abs(rad) < glMatrix.EPSILON) {\r\n    return copy(out, a);\r\n  }\r\n  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\r\n\r\n  rad = rad * 0.5;\r\n  var s = Math.sin(rad);\r\n  var bx = s * axis[0] / axisLength;\r\n  var by = s * axis[1] / axisLength;\r\n  var bz = s * axis[2] / axisLength;\r\n  var bw = Math.cos(rad);\r\n\r\n  var ax1 = a[0],\r\n      ay1 = a[1],\r\n      az1 = a[2],\r\n      aw1 = a[3];\r\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\r\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\r\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\r\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\r\n\r\n  var ax = a[4],\r\n      ay = a[5],\r\n      az = a[6],\r\n      aw = a[7];\r\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\r\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\r\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\r\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  out[2] = a[2] + b[2];\r\n  out[3] = a[3] + b[3];\r\n  out[4] = a[4] + b[4];\r\n  out[5] = a[5] + b[5];\r\n  out[6] = a[6] + b[6];\r\n  out[7] = a[7] + b[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {quat2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  var ax0 = a[0],\r\n      ay0 = a[1],\r\n      az0 = a[2],\r\n      aw0 = a[3],\r\n      bx1 = b[4],\r\n      by1 = b[5],\r\n      bz1 = b[6],\r\n      bw1 = b[7],\r\n      ax1 = a[4],\r\n      ay1 = a[5],\r\n      az1 = a[6],\r\n      aw1 = a[7],\r\n      bx0 = b[0],\r\n      by0 = b[1],\r\n      bz0 = b[2],\r\n      bw0 = b[3];\r\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\r\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\r\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\r\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\r\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\r\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\r\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\r\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  out[2] = a[2] * b;\r\n  out[3] = a[3] * b;\r\n  out[4] = a[4] * b;\r\n  out[5] = a[5] * b;\r\n  out[6] = a[6] * b;\r\n  out[7] = a[7] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\r\nexport var dot = quat.dot;\r\n\r\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {quat2} a the first operand\r\n * @param {quat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var mt = 1 - t;\r\n  if (dot(a, b) < 0) t = -t;\r\n\r\n  out[0] = a[0] * mt + b[0] * t;\r\n  out[1] = a[1] * mt + b[1] * t;\r\n  out[2] = a[2] * mt + b[2] * t;\r\n  out[3] = a[3] * mt + b[3] * t;\r\n  out[4] = a[4] * mt + b[4] * t;\r\n  out[5] = a[5] * mt + b[5] * t;\r\n  out[6] = a[6] * mt + b[6] * t;\r\n  out[7] = a[7] * mt + b[7] * t;\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\r\nexport function invert(out, a) {\r\n  var sqlen = squaredLength(a);\r\n  out[0] = -a[0] / sqlen;\r\n  out[1] = -a[1] / sqlen;\r\n  out[2] = -a[2] / sqlen;\r\n  out[3] = a[3] / sqlen;\r\n  out[4] = -a[4] / sqlen;\r\n  out[5] = -a[5] / sqlen;\r\n  out[6] = -a[6] / sqlen;\r\n  out[7] = a[7] / sqlen;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {quat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\r\nexport function conjugate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  out[2] = -a[2];\r\n  out[3] = a[3];\r\n  out[4] = -a[4];\r\n  out[5] = -a[5];\r\n  out[6] = -a[6];\r\n  out[7] = a[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\r\nexport var length = quat.length;\r\n\r\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {quat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\r\nexport var squaredLength = quat.squaredLength;\r\n\r\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {quat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\r\nexport function normalize(out, a) {\r\n  var magnitude = squaredLength(a);\r\n  if (magnitude > 0) {\r\n    magnitude = Math.sqrt(magnitude);\r\n\r\n    var a0 = a[0] / magnitude;\r\n    var a1 = a[1] / magnitude;\r\n    var a2 = a[2] / magnitude;\r\n    var a3 = a[3] / magnitude;\r\n\r\n    var b0 = a[4];\r\n    var b1 = a[5];\r\n    var b2 = a[6];\r\n    var b3 = a[7];\r\n\r\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\r\n\r\n    out[0] = a0;\r\n    out[1] = a1;\r\n    out[2] = a2;\r\n    out[3] = a3;\r\n\r\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\r\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\r\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\r\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {quat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\r\nexport function str(a) {\r\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {quat2} a the first dual quaternion.\r\n * @param {quat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\r\n}\r\n\r\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {quat2} a the first dual quat.\r\n * @param {quat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1],\r\n      a2 = a[2],\r\n      a3 = a[3],\r\n      a4 = a[4],\r\n      a5 = a[5],\r\n      a6 = a[6],\r\n      a7 = a[7];\r\n  var b0 = b[0],\r\n      b1 = b[1],\r\n      b2 = b[2],\r\n      b3 = b[3],\r\n      b4 = b[4],\r\n      b5 = b[5],\r\n      b6 = b[6],\r\n      b7 = b[7];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\r\n}","import * as glMatrix from \"./common.js\";\r\n\r\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\r\n\r\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function create() {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\r\n    out[0] = 0;\r\n    out[1] = 0;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {vec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function clone(a) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\r\nexport function fromValues(x, y) {\r\n  var out = new glMatrix.ARRAY_TYPE(2);\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the source vector\r\n * @returns {vec2} out\r\n */\r\nexport function copy(out, a) {\r\n  out[0] = a[0];\r\n  out[1] = a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nexport function set(out, x, y) {\r\n  out[0] = x;\r\n  out[1] = y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function add(out, a, b) {\r\n  out[0] = a[0] + b[0];\r\n  out[1] = a[1] + b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function subtract(out, a, b) {\r\n  out[0] = a[0] - b[0];\r\n  out[1] = a[1] - b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function multiply(out, a, b) {\r\n  out[0] = a[0] * b[0];\r\n  out[1] = a[1] * b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function divide(out, a, b) {\r\n  out[0] = a[0] / b[0];\r\n  out[1] = a[1] / b[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\r\nexport function ceil(out, a) {\r\n  out[0] = Math.ceil(a[0]);\r\n  out[1] = Math.ceil(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to floor\r\n * @returns {vec2} out\r\n */\r\nexport function floor(out, a) {\r\n  out[0] = Math.floor(a[0]);\r\n  out[1] = Math.floor(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function min(out, a, b) {\r\n  out[0] = Math.min(a[0], b[0]);\r\n  out[1] = Math.min(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nexport function max(out, a, b) {\r\n  out[0] = Math.max(a[0], b[0]);\r\n  out[1] = Math.max(a[1], b[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to round\r\n * @returns {vec2} out\r\n */\r\nexport function round(out, a) {\r\n  out[0] = Math.round(a[0]);\r\n  out[1] = Math.round(a[1]);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\r\nexport function scale(out, a, b) {\r\n  out[0] = a[0] * b;\r\n  out[1] = a[1] * b;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\r\nexport function scaleAndAdd(out, a, b, scale) {\r\n  out[0] = a[0] + b[0] * scale;\r\n  out[1] = a[1] + b[1] * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\r\nexport function distance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\r\nexport function squaredDistance(a, b) {\r\n  var x = b[0] - a[0],\r\n      y = b[1] - a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\r\nexport function length(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return Math.sqrt(x * x + y * y);\r\n}\r\n\r\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {vec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\r\nexport function squaredLength(a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  return x * x + y * y;\r\n}\r\n\r\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to negate\r\n * @returns {vec2} out\r\n */\r\nexport function negate(out, a) {\r\n  out[0] = -a[0];\r\n  out[1] = -a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to invert\r\n * @returns {vec2} out\r\n */\r\nexport function inverse(out, a) {\r\n  out[0] = 1.0 / a[0];\r\n  out[1] = 1.0 / a[1];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nexport function normalize(out, a) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  var len = x * x + y * y;\r\n  if (len > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len = 1 / Math.sqrt(len);\r\n    out[0] = a[0] * len;\r\n    out[1] = a[1] * len;\r\n  }\r\n  return out;\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nexport function dot(a, b) {\r\n  return a[0] * b[0] + a[1] * b[1];\r\n}\r\n\r\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec3} out\r\n */\r\nexport function cross(out, a, b) {\r\n  var z = a[0] * b[1] - a[1] * b[0];\r\n  out[0] = out[1] = 0;\r\n  out[2] = z;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\r\nexport function lerp(out, a, b, t) {\r\n  var ax = a[0],\r\n      ay = a[1];\r\n  out[0] = ax + t * (b[0] - ax);\r\n  out[1] = ay + t * (b[1] - ay);\r\n  return out;\r\n}\r\n\r\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\r\nexport function random(out, scale) {\r\n  scale = scale || 1.0;\r\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\r\n  out[0] = Math.cos(r) * scale;\r\n  out[1] = Math.sin(r) * scale;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y;\r\n  out[1] = m[1] * x + m[3] * y;\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat2d(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[2] * y + m[4];\r\n  out[1] = m[1] * x + m[3] * y + m[5];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat3(out, a, m) {\r\n  var x = a[0],\r\n      y = a[1];\r\n  out[0] = m[0] * x + m[3] * y + m[6];\r\n  out[1] = m[1] * x + m[4] * y + m[7];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the vector to transform\r\n * @param {mat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\r\nexport function transformMat4(out, a, m) {\r\n  var x = a[0];\r\n  var y = a[1];\r\n  out[0] = m[0] * x + m[4] * y + m[12];\r\n  out[1] = m[1] * x + m[5] * y + m[13];\r\n  return out;\r\n}\r\n\r\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {vec2} a The vec2 point to rotate\r\n * @param {vec2} b The origin of the rotation\r\n * @param {Number} c The angle of rotation\r\n * @returns {vec2} out\r\n */\r\nexport function rotate(out, a, b, c) {\r\n  //Translate point to the origin\r\n  var p0 = a[0] - b[0],\r\n      p1 = a[1] - b[1],\r\n      sinC = Math.sin(c),\r\n      cosC = Math.cos(c);\r\n\r\n  //perform rotation and translate to correct position\r\n  out[0] = p0 * cosC - p1 * sinC + b[0];\r\n  out[1] = p0 * sinC + p1 * cosC + b[1];\r\n\r\n  return out;\r\n}\r\n\r\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {vec2} a The first operand\r\n * @param {vec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\r\nexport function angle(a, b) {\r\n  var x1 = a[0],\r\n      y1 = a[1],\r\n      x2 = b[0],\r\n      y2 = b[1];\r\n\r\n  var len1 = x1 * x1 + y1 * y1;\r\n  if (len1 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len1 = 1 / Math.sqrt(len1);\r\n  }\r\n\r\n  var len2 = x2 * x2 + y2 * y2;\r\n  if (len2 > 0) {\r\n    //TODO: evaluate use of glm_invsqrt here?\r\n    len2 = 1 / Math.sqrt(len2);\r\n  }\r\n\r\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\r\n\r\n  if (cosine > 1.0) {\r\n    return 0;\r\n  } else if (cosine < -1.0) {\r\n    return Math.PI;\r\n  } else {\r\n    return Math.acos(cosine);\r\n  }\r\n}\r\n\r\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {vec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\r\nexport function str(a) {\r\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function exactEquals(a, b) {\r\n  return a[0] === b[0] && a[1] === b[1];\r\n}\r\n\r\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {vec2} a The first vector.\r\n * @param {vec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\r\nexport function equals(a, b) {\r\n  var a0 = a[0],\r\n      a1 = a[1];\r\n  var b0 = b[0],\r\n      b1 = b[1];\r\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\r\n}\r\n\r\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\r\nexport var len = length;\r\n\r\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\r\nexport var sub = subtract;\r\n\r\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\r\nexport var mul = multiply;\r\n\r\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\r\nexport var div = divide;\r\n\r\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\r\nexport var dist = distance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\r\nexport var sqrDist = squaredDistance;\r\n\r\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\r\nexport var sqrLen = squaredLength;\r\n\r\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\r\nexport var forEach = function () {\r\n  var vec = create();\r\n\r\n  return function (a, stride, offset, count, fn, arg) {\r\n    var i = void 0,\r\n        l = void 0;\r\n    if (!stride) {\r\n      stride = 2;\r\n    }\r\n\r\n    if (!offset) {\r\n      offset = 0;\r\n    }\r\n\r\n    if (count) {\r\n      l = Math.min(count * stride + offset, a.length);\r\n    } else {\r\n      l = a.length;\r\n    }\r\n\r\n    for (i = offset; i < l; i += stride) {\r\n      vec[0] = a[i];vec[1] = a[i + 1];\r\n      fn(vec, vec, arg);\r\n      a[i] = vec[0];a[i + 1] = vec[1];\r\n    }\r\n\r\n    return a;\r\n  };\r\n}();","import * as glMatrix from \"./gl-matrix/common.js\";\r\nimport * as mat2 from \"./gl-matrix/mat2.js\";\r\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\r\nimport * as mat3 from \"./gl-matrix/mat3.js\";\r\nimport * as mat4 from \"./gl-matrix/mat4.js\";\r\nimport * as quat from \"./gl-matrix/quat.js\";\r\nimport * as quat2 from \"./gl-matrix/quat2.js\";\r\nimport * as vec2 from \"./gl-matrix/vec2.js\";\r\nimport * as vec3 from \"./gl-matrix/vec3.js\";\r\nimport * as vec4 from \"./gl-matrix/vec4.js\";\r\n\r\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","const iblSuffix = Filament.getSupportedFormatSuffix(\"etc s3tc\");\nconst environ = \"env/syferfontein_18d_clear_2k\";\n\nexport const ibl = `${environ}_ibl${iblSuffix}.ktx.bmp`;\nexport const skySmall = `${environ}_skybox_tiny.ktx.bmp`;\nexport const skyLarge = `${environ}_skybox.ktx.bmp`;\n\nexport const tracksMaterial = \"materials/tracks.filamat\";\n\nexport const diffuse = \"diffuse.jpg\";\nexport const specular = \"specular.jpg\";\nexport const normal = \"normal.jpg\";\nexport const mesh = \"filamesh\";\n\nexport const collision = \"tracks/collision.png\";\nexport const elevation = \"tracks/height.png\";\n","// -------------------------------------------------------------------------------------------------\n// The App owns the Display and Simulation.\n//\n// HexGL by Thibaut 'BKcore' Despoulain <http://bkcore.com>\n// Rewritten by Philip Rideout <https://prideout.net>\n// -------------------------------------------------------------------------------------------------\n\nimport * as urls from \"./urls\";\n\nimport { mat4, vec3 } from \"gl-matrix\";\nimport { createWorker, ITypedWorker } from \"typed-web-workers\";\n\nimport ChaseCamera from \"./chasecam\";\nimport Display from \"./display\";\nimport Sampler from \"./sampler\";\nimport Simulation from \"./simulation\";\n\nconst initialVehiclePosition = vec3.fromValues(-1134 * 2, 400, -886);\nconst vehicleMatrix = mat4.create();\n\nFilament.init([urls.skySmall, urls.ibl, urls.tracksMaterial ], () => {\n    // The global app instance can be accessed for debugging purposes only.\n    window[\"app\"] = new App();\n});\n\nclass App {\n    private readonly display: Display;\n    private readonly chasecam: ChaseCamera;\n    private simulation: Simulation;\n    private time: number;\n\n    constructor() {\n        const canvas = document.getElementsByTagName(\"canvas\")[0];\n        this.display = new Display(canvas);\n        this.chasecam = new ChaseCamera(this.display.camera, vehicleMatrix);\n        const collision = new Sampler(urls.collision);\n        const elevation = new Sampler(urls.elevation);\n        this.simulation = new Simulation(canvas, collision, elevation);\n        this.simulation.resetPosition(initialVehiclePosition);\n        this.tick = this.tick.bind(this);\n        this.time = null;\n        window.requestAnimationFrame(this.tick);\n    }\n\n    private tick() {\n        // Determine the time step.\n        const time = Date.now();\n        if (this.time === null) {\n            this.time = time;\n        }\n        const dt = (time - this.time) * 0.1;\n        this.time = time;\n\n        // Update the vehicle orientation and position.\n        this.simulation.tick(dt);\n        mat4.copy(vehicleMatrix, this.simulation.vehicleMatrix);\n\n        // Update the camera position.\n        this.chasecam.tick(dt, this.simulation.getSpeedRatio());\n\n        // Render the 3D scene.\n        this.display.render(vehicleMatrix);\n\n        // Request the next frame.\n        window.requestAnimationFrame(this.tick);\n    }\n}\n\ninterface Values {\n    x: number;\n    y: number;\n}\n\nfunction workFn(input: Values, callback: (_: number) => void): void {\n    callback(input.x + input.y);\n}\n\nfunction logFn(result: number) {\n    console.log(`We received this response from the worker: ${result}`);\n}\n\nconst typedWorker: ITypedWorker<Values, number> = createWorker(workFn, logFn);\n\ntypedWorker.postMessage({ x: 5, y: 5 });\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar TypedWorker_1 = require(\"./TypedWorker\");\r\nexports.createWorker = TypedWorker_1.createWorker;\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nfunction createWorker(workerFunction, onMessage) {\r\n    if (onMessage === void 0) { onMessage = function (output) { }; }\r\n    return new TypedWorker(workerFunction, onMessage);\r\n}\r\nexports.createWorker = createWorker;\r\nvar TypedWorker = /** @class */ (function () {\r\n    function TypedWorker(workerFunction, onMessage) {\r\n        if (onMessage === void 0) { onMessage = function (output) { }; }\r\n        var _this = this;\r\n        this.workerFunction = workerFunction;\r\n        this.onMessage = onMessage;\r\n        var postMessage = \"(\" + workerFunction + \").call(this, e.data, postMessage)\";\r\n        var workerFile = \"self.onmessage=function(e){\" + postMessage + \"}\";\r\n        var blob = new Blob([workerFile], { type: 'application/javascript' });\r\n        this._nativeWorker = new Worker(URL.createObjectURL(blob));\r\n        this._nativeWorker.onmessage = function (messageEvent) {\r\n            _this.onMessage(messageEvent.data);\r\n        };\r\n    }\r\n    /**\r\n     * Post message to worker for processing\r\n     * @param workerMessage message to send to worker\r\n     */\r\n    TypedWorker.prototype.postMessage = function (workerMessage, transfer) {\r\n        this._nativeWorker.postMessage(workerMessage, transfer);\r\n    };\r\n    TypedWorker.prototype.terminate = function () {\r\n        this._nativeWorker.terminate();\r\n    };\r\n    return TypedWorker;\r\n}());\r\n","// -------------------------------------------------------------------------------------------------\n// The ChaseCamera adjusts a camera to make it follow a target whose position and orientation are\n// represented by a shared matrix.\n//\n//   - constructor(camera: Filament.Camera, target: mat4)\n//   - tick(dt: number, speedRatio: number)\n//\n// HexGL by Thibaut 'BKcore' Despoulain <http://bkcore.com>\n// Rewritten by Philip Rideout <https://prideout.net>\n// -------------------------------------------------------------------------------------------------\n\nimport \"./filament\";\n\nimport { mat4, quat, vec3 } from \"gl-matrix\";\n\nexport default class ChaseCamera {\n    private readonly camera: Filament.Camera;\n    private readonly target: mat4;\n    private readonly speedOffsetMax: number;\n    private readonly yoffset: number;\n    private readonly zoffset: number;\n    private readonly viewOffset: number;\n\n    private speedOffset: number;\n\n    constructor(camera: Filament.Camera, target: mat4) {\n        this.camera = camera;\n        this.target = target;\n        this.speedOffset = 0;\n        this.speedOffsetMax = 10;\n        this.yoffset = 16.0;\n        this.zoffset = 30.0; // <= this was 10 in the original game\n        this.viewOffset = 5.0;\n    }\n\n    public tick(dt: number, speedRatio: number) {\n        const vehicleOrientation = quat.create();\n        mat4.getRotation(vehicleOrientation, this.target);\n\n        const up = vec3.fromValues(0, 1, 0);\n        vec3.transformQuat(up, up, vehicleOrientation);\n\n        const dir = vec3.fromValues(0, 0, 1);\n        vec3.transformQuat(dir, dir, vehicleOrientation);\n\n        this.speedOffset += (this.speedOffsetMax * speedRatio - this.speedOffset) *\n                Math.min(1.0, 0.3 * dt);\n\n        const position = vec3.create();\n        mat4.getTranslation(position, this.target);\n\n        vec3.scale(dir, dir, this.zoffset + this.speedOffset);\n        vec3.subtract(position, position, dir);\n\n        vec3.scale(up, up, this.yoffset);\n        vec3.add(position, position, up);\n\n        position[1] += -up[1] + this.yoffset;\n\n        vec3.normalize(dir, dir);\n        vec3.scale(dir, dir, this.viewOffset);\n        const target = vec3.add(vec3.create(), position, dir);\n\n        this.camera.lookAt(\n                position as unknown as number[],\n                target as unknown as number[],\n                [0, 1, 0]);\n    }\n}\n","// -------------------------------------------------------------------------------------------------\n// The Display draws to the main canvas and manages all Filament entities.\n//\n//   - constructor(canvas: HTMLCanvasElement)\n//   - readonly camera: Filament.Camera;\n//   - render(vehicleMatrix: mat4)\n//\n// HexGL by Thibaut 'BKcore' Despoulain <http://bkcore.com>\n// Rewritten by Philip Rideout <https://prideout.net>\n// -------------------------------------------------------------------------------------------------\n\nimport \"./filament\";\n\nimport * as urls from \"./urls\";\n\nimport { mat4 } from \"gl-matrix\";\n\nexport default class Display {\n\n    public readonly camera: Filament.Camera;\n    private canvas: HTMLCanvasElement;\n    private engine: Filament.Engine;\n    private scene: Filament.Scene;\n    private skybox: Filament.Skybox;\n    private indirectLight: Filament.IndirectLight;\n    private view: Filament.View;\n    private swapChain: Filament.SwapChain;\n    private renderer: Filament.Renderer;\n    private sampler: Filament.TextureSampler;\n    private material: Filament.Material;\n    private ship: Filament.Entity;\n\n    constructor(canvas) {\n        this.canvas = canvas;\n        this.engine = Filament.Engine.create(canvas);\n        this.scene = this.engine.createScene();\n        this.skybox = this.engine.createSkyFromKtx(urls.skySmall);\n        this.scene.setSkybox(this.skybox);\n        this.indirectLight = this.engine.createIblFromKtx(urls.ibl);\n        this.indirectLight.setIntensity(100000);\n        this.scene.setIndirectLight(this.indirectLight);\n        this.swapChain = this.engine.createSwapChain();\n        this.renderer = this.engine.createRenderer();\n        this.camera = this.engine.createCamera();\n        this.view = this.engine.createView();\n        this.view.setCamera(this.camera);\n        this.view.setScene(this.scene);\n\n        this.sampler = new Filament.TextureSampler(\n            Filament.MinFilter.LINEAR_MIPMAP_LINEAR, Filament.MagFilter.LINEAR,\n            Filament.WrapMode.REPEAT);\n\n        this.material = this.engine.createMaterial(urls.tracksMaterial);\n\n        // Load the high-res skybox only after every other asset has been loaded.\n        const addEntity = (entity) => {\n            this.scene.addEntity(entity);\n            if (5 === this.scene.getRenderableCount()) {\n                Filament.fetch([urls.skyLarge], () => {\n                    this.engine.destroySkybox(this.skybox);\n                    this.skybox = this.engine.createSkyFromKtx(urls.skyLarge);\n                    this.scene.setSkybox(this.skybox);\n                });\n            }\n        };\n\n        const filenames = [urls.diffuse, urls.specular, urls.normal, urls.mesh];\n        const shipmi = this.material.createInstance();\n        const asset = \"ship\";\n        const assetUrls = filenames.map((path) => `${asset}/${path}`);\n\n        // Load the ship first since it determines camera, then all other assets.\n        Filament.fetch(assetUrls, () => {\n            this.ship = this.createRenderable(asset, shipmi);\n            addEntity(this.ship);\n            for (const bgasset of [\"tracks\", \"scrapers1\", \"scrapers2\"]) {\n                const bgurls = filenames.map((path) => `${bgasset}/${path}`);\n                Filament.fetch(bgurls, () => {\n                    const bgmi = this.material.createInstance();\n                    addEntity(this.createRenderable(bgasset, bgmi));\n                });\n            }\n        });\n\n        const sunlight = Filament.EntityManager.get().create();\n        Filament.LightManager.Builder(Filament.LightManager$Type.SUN)\n            .color([0.98, 0.92, 0.89])\n            .intensity(110000.0)\n            .direction([0.5, -1, 0])\n            .build(this.engine, sunlight);\n        addEntity(sunlight);\n\n        this.resize = this.resize.bind(this);\n        window.addEventListener(\"resize\", this.resize);\n        this.resize();\n    }\n\n    public render(vehicleMatrix: mat4) {\n        if (this.ship) {\n            const tcm = this.engine.getTransformManager();\n            const inst = tcm.getInstance(this.ship);\n            tcm.setTransform(inst, vehicleMatrix as unknown as number[]);\n            inst.delete();\n        }\n        this.renderer.render(this.swapChain, this.view);\n    }\n\n    private resize() {\n        const dpr = window.devicePixelRatio;\n        const width = this.canvas.width = window.innerWidth * dpr;\n        const height = this.canvas.height = window.innerHeight * dpr;\n        this.view.setViewport([0, 0, width, height]);\n\n        const aspect = width / height;\n        const Fov = Filament.Camera$Fov;\n        const fov = aspect < 1 ? Fov.HORIZONTAL : Fov.VERTICAL;\n        this.camera.setProjectionFov(45, aspect, 1.0, 20000.0, fov);\n    }\n\n    private createRenderable(name, matinstance) {\n        const diffuse = this.engine.createTextureFromJpeg(`${name}/${urls.diffuse}`);\n        const specular = this.engine.createTextureFromJpeg(`${name}/${urls.specular}`);\n        const normal = this.engine.createTextureFromJpeg(`${name}/${urls.normal}`);\n        matinstance.setTextureParameter(\"diffuse\", diffuse, this.sampler);\n        matinstance.setTextureParameter(\"specular\", specular, this.sampler);\n        matinstance.setTextureParameter(\"normal\", normal, this.sampler);\n        return this.engine.loadFilamesh(`${name}/${urls.mesh}`, matinstance, {}).renderable;\n    }\n}\n","// -------------------------------------------------------------------------------------------------\n// Sampler allows clients to sample from an image using bilinear interpolation.\n//\n//   - constructor(url: string, cb: () => void)\n//   - getPixel(x: number, y: number): Color\n//   - getPixelBilinear(fx: number, fy: number): Color\n//   - getPixelF(x: number, y: number): Color\n//   - getPixelBilinearF(fx: number, fy: number): Color\n//\n// HexGL by Thibaut 'BKcore' Despoulain <http://bkcore.com>\n// Rewritten by Philip Rideout <https://prideout.net>\n// -------------------------------------------------------------------------------------------------\n\ninterface Color {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}\n\nexport default class Sampler {\n    public width: number;\n    public height: number;\n    private image: HTMLImageElement;\n    private pixels: ImageData;\n    private canvas: HTMLCanvasElement;\n\n    constructor(url: string) {\n        this.image = new Image();\n        this.pixels = null;\n        this.canvas = null;\n        this.image.onload = () => {\n            const canvas = this.canvas = document.createElement(\"canvas\");\n            this.canvas.width = this.image.width;\n            this.canvas.height = this.image.height;\n            const context = this.canvas.getContext(\"2d\");\n            context.drawImage(this.image, 0, 0);\n            this.pixels = context.getImageData(0, 0, canvas.width, canvas.height);\n            this.width = this.pixels.width;\n            this.height = this.pixels.height;\n            this.canvas = null;\n            this.image = null;\n        };\n        this.image.src = url;\n    }\n\n    public ready(): boolean {\n        return this.image === null;\n    }\n\n    public getPixel(x: number, y: number): Color {\n        if (!this.pixels || x < 0 || y < 0 || x >= this.pixels.width || y >= this.pixels.height) {\n            return {r: 0, g: 0, b: 0, a: 0};\n        }\n        const i = (y * this.pixels.width + x) * 4;\n        return {\n            r: this.pixels.data[i],\n            g: this.pixels.data[i + 1],\n            b: this.pixels.data[i + 2],\n            a: this.pixels.data[i + 3],\n        };\n    }\n\n    public getPixelBilinear(fx: number, fy: number): Color {\n        const x = Math.floor(fx);\n        const y = Math.floor(fy);\n        const rx = fx - x - .5;\n        const ry = fy - y - .5;\n        const ax = Math.abs(rx);\n        const ay = Math.abs(ry);\n        const dx = rx < 0 ? -1 : 1;\n        const dy = ry < 0 ? -1 : 1;\n        const c = this.getPixel(x, y);\n        const cx = this.getPixel(x + dx, y);\n        const cy = this.getPixel(x, y + dy);\n        const cxy = this.getPixel(x + dx, y + dy);\n        const cf1 = [\n            (1 - ax) * c.r + ax * cx.r,\n            (1 - ax) * c.g + ax * cx.g,\n            (1 - ax) * c.b + ax * cx.b,\n            (1 - ax) * c.a + ax * cx.a,\n        ];\n        const cf2 = [\n            (1 - ax) * cy.r + ax * cxy.r,\n            (1 - ax) * cy.g + ax * cxy.g,\n            (1 - ax) * cy.b + ax * cxy.b,\n            (1 - ax) * cy.a + ax * cxy.a,\n        ];\n        return {\n            r: (1 - ay) * cf1[0] + ay * cf2[0],\n            g: (1 - ay) * cf1[1] + ay * cf2[1],\n            b: (1 - ay) * cf1[2] + ay * cf2[2],\n            a: (1 - ay) * cf1[3] + ay * cf2[3],\n        };\n    }\n\n    public getPixelF(x: number, y: number): number {\n        const c = this.getPixel(x, y);\n        return c.r + c.g * 255 + c.b * 255 * 255;\n    }\n\n    public getPixelFBilinear(x: number, y: number): number {\n        const c = this.getPixelBilinear(x, y);\n        return c.r + c.g * 255 + c.b * 255 * 255;\n    }\n}\n","// -------------------------------------------------------------------------------------------------\n// The Simulation listens to input events and periodically updates a matrix representing the\n// vehicle's position and orientation. Looks at two images (collision / elevation) to glean\n// information about the race track.\n//\n//   - constructor(canvas: HTMLCanvasElement, collision: Sampler, elevation: Sampler)\n//   - readonly vehicleMatrix: mat4;\n//   - resetPosition(pos: vec3)\n//   - tick(dt: number)\n//   - getSpeedRatio(): number\n//\n// HexGL by Thibaut 'BKcore' Despoulain <http://bkcore.com>\n// Rewritten by Philip Rideout <https://prideout.net>\n// -------------------------------------------------------------------------------------------------\n\nimport Sampler from \"./sampler\";\n\nimport { mat3, mat4, quat, vec3, vec4 } from \"gl-matrix\";\n\nexport default class Simulation {\n    public readonly vehicleMatrix: mat4;\n\n    private readonly dummyMatrix: mat4;\n    private readonly collision: Sampler;\n    private readonly elevation: Sampler;\n    private readonly keyState: KeyState;\n    private readonly maxSpeed: number;\n    private readonly boosterSpeed: number;\n\n    private active: boolean;\n    private destroyed: boolean;\n    private falling: boolean;\n    private movement: vec3;\n    private rotation: vec3;\n    private roll: number;\n    private rollAxis: vec3;\n    private drift: number;\n    private speed: number;\n    private speedRatio: number;\n    private boost: number;\n    private shield: number;\n    private angular: number;\n    private quaternion: quat;\n    private collisionPixelRatio: number;\n    private collisionDetection: boolean;\n    private collisionPreviousPosition: vec3;\n    private heightPixelRatio: number;\n    private heightBias: number;\n    private heightLerp: number;\n    private heightScale: number;\n    private shieldDelay: number;\n\n    private readonly rollAngle: number;\n    private readonly rollLerp: number;\n    private readonly rollDirection: vec3;\n\n    private gradient: number;\n    private gradientTarget: number;\n    private gradientLerp: number;\n    private gradientScale: number;\n    private gradientVector: vec3;\n    private tilt: number;\n    private tiltTarget: number;\n    private tiltLerp: number;\n    private tiltScale: number;\n    private tiltVector: vec3;\n    private repulsionVLeft: vec3;\n    private repulsionVRight: vec3;\n    private repulsionVFront: vec3;\n    private repulsionVScale: number;\n    private repulsionAmount: number;\n    private repulsionForce: vec3;\n    private fallVector: vec3;\n    private collisionState: CollisionState;\n\n    constructor(canvas: HTMLCanvasElement, collision: Sampler, elevation: Sampler) {\n        this.vehicleMatrix = mat4.create();\n        this.dummyMatrix = mat4.create();\n        this.collision = collision;\n        this.elevation = elevation;\n        this.keyState = {\n            backward: false,\n            forward: false,\n            left: false,\n            ltrigger: false,\n            right: false,\n            rtrigger: false,\n            use: false,\n        };\n        document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n        document.addEventListener(\"keyup\", this.onKeyUp.bind(this));\n\n        this.maxSpeed = 7.0;\n        this.boosterSpeed = this.maxSpeed * 0.2;\n        this.active = true;\n        this.destroyed = false;\n        this.falling = false;\n        this.movement = vec3.fromValues(0, 0, 0);\n        this.rotation = vec3.fromValues(0, 0, 0);\n        this.roll = 0.0;\n        this.rollAxis = vec3.create();\n        this.drift = 0.0;\n        this.shieldDelay = 60;\n        this.speed = 0.0;\n        this.speedRatio = 0.0;\n        this.boost = 0.0;\n        this.shield = 1.0;\n        this.angular = 0.0;\n        this.quaternion = quat.create();\n        this.collisionPixelRatio = 2048.0 / 6000.0;\n        this.collisionDetection = true;\n        this.collisionPreviousPosition = vec3.create();\n        this.heightPixelRatio = 2048.0 / 6000.0;\n        this.heightBias = 4.0;\n        this.heightLerp = 0.4;\n        this.heightScale = 10.0;\n        this.rollAngle = 0.6;\n        this.rollLerp = 0.08;\n        this.rollDirection = vec3.fromValues(0, 0, 1);\n        this.gradient = 0.0;\n        this.gradientTarget = 0.0;\n        this.gradientLerp = 0.05;\n        this.gradientScale = 1; // 4.0;\n        this.gradientVector = vec3.fromValues(0, 0, 5);\n        this.tilt = 0.0;\n        this.tiltTarget = 0.0;\n        this.tiltLerp = 0.05;\n        this.tiltScale = 1; // 4.0;\n        this.tiltVector = vec3.fromValues(5, 0, 0);\n        this.repulsionVLeft = vec3.fromValues(1, 0, 0);\n        this.repulsionVRight = vec3.fromValues(-1, 0, 0);\n        this.repulsionVFront = vec3.fromValues(0, 0, 1);\n        this.repulsionVScale = 1; // 4.0;\n        this.repulsionAmount = 0.0;\n        this.repulsionForce = vec3.create();\n\n        // this.resetPos = null;\n        // this.resetRot = null;\n\n        this.collisionState = {\n            front: false,\n            left: false,\n            right: false,\n        };\n    }\n\n    public getMatrix(): mat4 {\n        return this.vehicleMatrix;\n    }\n\n    public resetPosition(pos: vec3) {\n        mat4.fromTranslation(this.vehicleMatrix, pos);\n        mat4.fromTranslation(this.dummyMatrix, pos);\n    }\n\n    public tick(dt: number) {\n        if (!this.collision.ready() || !this.elevation.ready()) {\n            return;\n        }\n        if (this.falling) {\n            mat4.translate(this.vehicleMatrix, this.vehicleMatrix, this.fallVector);\n            return;\n        }\n\n        this.rotation[1] = 0;\n        vec3.set(this.movement, 0, 0, 0);\n        this.drift = -this.drift * driftLerp;\n        this.angular = -this.angular * angularLerp * .5;\n\n        let rollAmount = 0;\n        let angularAmount = 0;\n        const yawLeap = 0;\n\n        if (this.active) {\n            if (this.keyState.left) {\n                angularAmount += angularSpeed * dt;\n                rollAmount -= this.rollAngle;\n            }\n            if (this.keyState.right) {\n                angularAmount -= angularSpeed * dt;\n                rollAmount += this.rollAngle;\n            }\n\n            if (this.keyState.forward) {\n                this.speed += thrust * dt;\n            } else {\n                this.speed -= airResist * dt;\n            }\n\n            if (this.keyState.ltrigger) {\n                if (this.keyState.left) {\n                    angularAmount += airAngularSpeed * dt;\n                } else {\n                    angularAmount += airAngularSpeed * .5 * dt;\n                }\n                this.speed -= airBrake * dt;\n                this.drift += (airDrift - this.drift) * driftLerp;\n                this.movement[0] += this.speed * this.drift * dt;\n                if (this.drift > 0) {\n                    this.movement[2] -= this.speed * this.drift * dt;\n                }\n                rollAmount -= this.rollAngle * .7;\n            }\n\n            if (this.keyState.rtrigger) {\n                if (this.keyState.right) {\n                    angularAmount -= airAngularSpeed * dt;\n                } else {\n                    angularAmount -= airAngularSpeed * .5 * dt;\n                }\n                this.speed -= airBrake * dt;\n                this.drift += (-airDrift - this.drift) * driftLerp;\n                this.movement[0] += this.speed * this.drift * dt;\n                if (this.drift < 0) {\n                    this.movement[2] += this.speed * this.drift * dt;\n                }\n                rollAmount += this.rollAngle * .7;\n            }\n        }\n\n        this.angular += (angularAmount - this.angular) * angularLerp;\n        this.rotation[1] = this.angular;\n\n        this.speed = Math.max(0, Math.min(this.speed, maxSpeed));\n        this.speedRatio = this.speed / maxSpeed;\n        this.movement[2] += this.speed * dt;\n\n        if (vec3.equals(this.repulsionForce, zero3)) {\n            vec3.copy(this.repulsionForce, zero3);\n        } else {\n            if (this.repulsionForce[2] !== 0) {\n                this.movement[2] = 0;\n            }\n            vec3.add(this.movement, this.movement, this.repulsionForce);\n            const t = dt > 1.5 ? repulsionLerp * 2 : repulsionLerp;\n            vec3.lerp(this.repulsionForce, this.repulsionForce, zero3, t);\n        }\n\n        mat4.getTranslation(this.collisionPreviousPosition, this.dummyMatrix);\n        // this.boosterCheck(dt);\n\n        const txz = vec3.fromValues(this.movement[0], 0, this.movement[2]);\n        mat4.translate(this.dummyMatrix, this.dummyMatrix, txz);\n        this.heightCheck(dt);\n\n        const ty = vec3.fromValues(0, this.movement[1], 0);\n        mat4.translate(this.dummyMatrix, this.dummyMatrix, ty);\n        this.collisionCheck(dt);\n\n        quat.set(this.quaternion, this.rotation[0], this.rotation[1], this.rotation[2], 1);\n        quat.normalize(this.quaternion, this.quaternion);\n        const dummyquat = quat.create();\n        mat4.getRotation(dummyquat, this.dummyMatrix);\n        quat.multiply(dummyquat, dummyquat, this.quaternion);\n\n        const dummypos = mat4.getTranslation(vec3.create(), this.dummyMatrix);\n        mat4.fromRotationTranslation(this.dummyMatrix, dummyquat, dummypos);\n\n        // Finally, formulate the final transformation matrix.\n        const xform = this.vehicleMatrix;\n        mat4.identity(xform);\n\n        // Gradient\n        const gradientDelta = (this.gradientTarget - (yawLeap + this.gradient)) * this.gradientLerp;\n        if (Math.abs(gradientDelta) > epsilon) {\n            this.gradient += gradientDelta;\n        }\n        if (Math.abs(this.gradient) > epsilon) {\n            mat4.rotate(xform, xform, this.gradient, gradientAxis);\n        }\n\n        // Tilting\n        const tiltDelta = (this.tiltTarget - this.tilt) * this.tiltLerp;\n        if (Math.abs(tiltDelta) > epsilon) {\n            this.tilt += tiltDelta;\n        }\n        if (Math.abs(this.tilt) > epsilon) {\n            mat4.rotate(xform, xform, this.tilt, tiltAxis);\n        }\n\n        // Rolling\n        const rollDelta = (rollAmount - this.roll) * this.rollLerp;\n        if (Math.abs(rollDelta) > epsilon) {\n            this.roll += rollDelta;\n        }\n        if (Math.abs(this.roll) > epsilon) {\n            vec3.copy(this.rollAxis, this.rollDirection);\n            mat4.rotate(xform, xform, this.roll, this.rollAxis);\n        }\n\n        mat4.multiply(xform, this.dummyMatrix, xform);\n    }\n\n    public getSpeedRatio(): number {\n        return (this.speed + this.boost) / this.maxSpeed;\n    }\n\n    private onKeyDown(event) {\n        const key = this.keyState;\n        switch (event.keyCode) {\n            case 38: /*up*/ key.forward = true; break;\n            case 40: /*down*/ key.backward = true; break;\n            case 37: /*left*/ key.left = true; break;\n            case 39: /*right*/ key.right = true; break;\n            case 81: /*Q*/ key.ltrigger = true; break;\n            case 65: /*A*/ key.ltrigger = true; break;\n            case 68: /*D*/ key.rtrigger = true; break;\n            case 69: /*E*/ key.rtrigger = true; break;\n        }\n    }\n\n    private onKeyUp(event) {\n        const key = this.keyState;\n        switch (event.keyCode) {\n            case 38: /*up*/ key.forward = false; break;\n            case 40: /*down*/ key.backward = false; break;\n            case 37: /*left*/ key.left = false; break;\n            case 39: /*right*/ key.right = false; break;\n            case 81: /*Q*/ key.ltrigger = false; break;\n            case 65: /*A*/ key.ltrigger = false; break;\n            case 68: /*D*/ key.rtrigger = false; break;\n            case 69: /*E*/ key.rtrigger = false; break;\n        }\n    }\n\n    private collisionCheck(dt: number): void {\n        if (this.shieldDelay > 0) {\n            this.shieldDelay -= dt;\n        }\n        this.collisionState.left = false;\n        this.collisionState.right = false;\n        this.collisionState.front = false;\n\n        const dummypos = mat4.getTranslation(vec3.create(), this.dummyMatrix);\n        const dummyquat = mat4.getRotation(quat.create(), this.dummyMatrix);\n\n        const x = this.collision.width / 2 + dummypos[0] * this.collisionPixelRatio;\n        const z = this.collision.height / 2 + dummypos[2] * this.collisionPixelRatio;\n        const pos = vec3.fromValues(x, 0, z);\n\n        const collision = this.collision.getPixelBilinear(x, z);\n        if (collision.r < 255) {\n\n            // shield\n            const sr = (this.getRealSpeed() / maxSpeed);\n            this.shield -= sr * sr * 0.8 * shieldDamage;\n\n            // repulsion\n            vec3.set(this.repulsionVLeft, 1, 0, 0);\n            vec3.set(this.repulsionVRight, -1, 0, 0);\n            vec3.transformQuat(this.repulsionVLeft, this.repulsionVLeft, dummyquat);\n            vec3.transformQuat(this.repulsionVRight, this.repulsionVRight, dummyquat);\n            vec3.scale(this.repulsionVLeft, this.repulsionVLeft, this.repulsionVScale);\n            vec3.scale(this.repulsionVRight, this.repulsionVRight, this.repulsionVScale);\n\n            const lPos = vec3.add(this.repulsionVLeft, this.repulsionVLeft, pos);\n            const rPos = vec3.add(this.repulsionVRight, this.repulsionVRight, pos);\n            const lCol = this.collision.getPixel(Math.round(lPos[0]), Math.round(lPos[2])).r;\n            const rCol = this.collision.getPixel(Math.round(rPos[0]), Math.round(rPos[2])).r;\n\n            this.repulsionAmount = Math.max(0.8, Math.min(repulsionCap, this.speed * repulsionRatio));\n            if (rCol > lCol) {\n                this.repulsionForce[0] += -this.repulsionAmount;\n                this.collisionState.left = true;\n            } else if (rCol > lCol) {\n                this.repulsionForce[0] += this.repulsionAmount;\n                this.collisionState.right = true;\n            } else {\n                this.repulsionForce[2] += -this.repulsionAmount * 4;\n                this.collisionState.front = true;\n                this.speed = 0;\n            }\n\n            // game over\n            if (rCol < 128 && lCol < 128) {\n                const fCol = this.collision.getPixel(Math.round(pos[0] + 2), Math.round(pos[2] + 2)).r;\n                if (fCol < 128) {\n                    console.log(\"GAMEOVER\");\n                    // this.fall();\n                }\n            }\n\n            this.speed *= collisionSpeedDecrease;\n            this.speed *= (1 - collisionSpeedDecreaseCoef * (1 - collision.r / 255));\n            this.boost = 0;\n        }\n    }\n\n    private getRealSpeed(): number {\n        return Math.round(this.speed + this.boost);\n    }\n\n    private heightCheck(dt: number): void {\n        const dummypos = mat4.getTranslation(vec3.create(), this.dummyMatrix);\n        const dummyquat = mat4.getRotation(quat.create(), this.dummyMatrix);\n\n        let x = this.elevation.width / 2 + dummypos[0] * this.heightPixelRatio;\n        let z = this.elevation.height / 2 + dummypos[2] * this.heightPixelRatio;\n        const height = this.elevation.getPixelFBilinear(x, z) / this.heightScale + this.heightBias;\n        if (height < 16777) {\n            const delta = height - dummypos[1];\n            if (delta > 0) {\n                this.movement[1] += delta;\n            } else {\n                this.movement[1] += delta * this.heightLerp;\n            }\n        }\n\n        // gradient\n        vec3.set(this.gradientVector, 0, 0, 5);\n        vec3.transformQuat(this.gradientVector, this.gradientVector, dummyquat);\n        vec3.add(this.gradientVector, this.gradientVector, dummypos);\n        x = this.elevation.width / 2 + this.gradientVector[0] * this.heightPixelRatio;\n        z = this.elevation.height / 2 + this.gradientVector[2] * this.heightPixelRatio;\n        let nheight = this.elevation.getPixelFBilinear(x, z) / this.heightScale + this.heightBias;\n        if (nheight < 16777) {\n            this.gradientTarget = -Math.atan2(nheight - height, 5.0) * this.gradientScale;\n        }\n\n        // tilt\n        vec3.set(this.tiltVector, 5, 0, 0);\n        vec3.transformQuat(this.tiltVector, this.tiltVector, dummyquat);\n        vec3.add(this.tiltVector, this.tiltVector, dummypos);\n        x = this.elevation.width / 2 + this.tiltVector[0] * this.heightPixelRatio;\n        z = this.elevation.height / 2 + this.tiltVector[2] * this.heightPixelRatio;\n        nheight = this.elevation.getPixelFBilinear(x, z) / this.heightScale + this.heightBias;\n        if (nheight >= 16777) {\n            vec3.subtract(this.tiltVector, this.tiltVector, dummypos);\n            vec3.scale(this.tiltVector, this.tiltVector, -1);\n            vec3.add(this.tiltVector, this.tiltVector, dummypos);\n            x = this.elevation.width / 2 + this.tiltVector[0] * this.heightPixelRatio;\n            z = this.elevation.height / 2 + this.tiltVector[2] * this.heightPixelRatio;\n            nheight = this.elevation.getPixelFBilinear(x, z) / this.heightScale + this.heightBias;\n        }\n        if (nheight < 16777) {\n            this.tiltTarget = Math.atan2(nheight - height, 5.0) * this.tiltScale;\n        }\n    }\n}\n\ninterface KeyState {\n    forward: boolean;\n    backward: boolean;\n    left: boolean;\n    right: boolean;\n    ltrigger: boolean;\n    rtrigger: boolean;\n    use: boolean;\n}\n\ninterface CollisionState {\n    front: boolean;\n    left: boolean;\n    right: boolean;\n}\n\nconst epsilon = 0.00000001;\nconst zero3 = vec3.create();\nconst airResist = 0.02;\nconst airDrift = 0.1;\nconst thrust = 0.02;\nconst airBrake = 0.02;\nconst maxSpeed = 7.0;\nconst boosterSpeed = this.maxSpeed * 0.2;\nconst boosterDecay = 0.01;\nconst angularSpeed = 0.005;\nconst airAngularSpeed = 0.0065;\nconst repulsionRatio = 0.5;\nconst repulsionCap = 2.5;\nconst repulsionLerp = 0.1;\nconst collisionSpeedDecrease = 0.8;\nconst collisionSpeedDecreaseCoef = 0.8;\nconst maxShield = 1.0;\nconst shieldTiming = 0;\nconst shieldDamage = 0.25;\nconst driftLerp = 0.35;\nconst angularLerp = 0.35;\nconst fallVector = vec3.fromValues(0, -20, 0);\nconst gradientAxis = vec3.fromValues(1, 0, 0);\nconst tiltAxis = vec3.fromValues(0, 0, 1);\n"],"sourceRoot":""}