!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";t.__esModule=!0;var r=n(1),o=n(2);r(),o.createWorker(function(e,t){t(e.x+e.y)},function(e){console.log("We received this response from the worker: "+e)}).postMessage({x:5,y:5})},function(e,t,n){"use strict";e.exports=function(){document.getElementById("wrapper").innerHTML="<h1> Hello World!</h1>"}},function(e,t,n){"use strict";t.__esModule=!0;var r=n(3);t.createWorker=r.createWorker},function(e,t,n){"use strict";t.__esModule=!0,t.createWorker=function(e,t){return void 0===t&&(t=function(e){}),new r(e,t)};var r=function(){function e(e,t){void 0===t&&(t=function(e){});var n=this;this.workerFunction=e,this.onMessage=t;var r=new Blob(["self.onmessage=function(e){"+("("+e+").call(this, e.data, postMessage)")+"}"],{type:"application/javascript"});this._nativeWorker=new Worker(URL.createObjectURL(r)),this._nativeWorker.onmessage=function(e){n.onMessage(e.data)}}return e.prototype.postMessage=function(e,t){this._nativeWorker.postMessage(e,t)},e.prototype.terminate=function(){this._nativeWorker.terminate()},e}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,