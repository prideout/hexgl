!function(e){var r={};function t(s){if(r[s])return r[s].exports;var n=r[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=r,t.d=function(e,r,s){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(s,n,function(r){return e[r]}.bind(null,n));return s},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=0)}([function(e,r,t){"use strict";r.__esModule=!0,t(1);var s=t(2),n=t(4),i=t(5),o=t(6),a=t(7),c="env/syferfontein_18d_clear_2k",l=c+"_ibl"+Filament.getSupportedFormatSuffix("etc s3tc")+".ktx.bmp",u=c+"_skybox_tiny.ktx.bmp",p=c+"_skybox.ktx.bmp",h="materials/tracks.filamat",f=function(){function e(e){var r=this;this.canvas=e,this.engine=Filament.Engine.create(e),this.scene=this.engine.createScene(),this.skybox=this.engine.createSkyFromKtx(u),this.scene.setSkybox(this.skybox),this.indirectLight=this.engine.createIblFromKtx(l),this.indirectLight.setIntensity(1e5),this.scene.setIndirectLight(this.indirectLight),this.swapChain=this.engine.createSwapChain(),this.renderer=this.engine.createRenderer(),this.camera=this.engine.createCamera(),this.view=this.engine.createView(),this.view.setCamera(this.camera),this.view.setScene(this.scene),Filament.fetch([p,h],function(){var e=n.processMesh(a.Track.faces,a.Track.vertices,a.Track.uvs,a.Track.normals),t=n.processMesh(i.Scrapers1.faces,i.Scrapers1.vertices,i.Scrapers1.uvs,i.Scrapers1.normals),s=n.processMesh(o.Scrapers2.faces,o.Scrapers2.vertices,o.Scrapers2.uvs,o.Scrapers2.normals);console.info(a.Track.vertices.length/3,e.length/3,Math.max.apply(null,e)),console.info(i.Scrapers1.vertices.length/3,t.length/3,Math.max.apply(null,t)),console.info(o.Scrapers2.vertices.length/3,s.length/3,Math.max.apply(null,s)),r.engine.destroySkybox(r.skybox),r.skybox=r.engine.createSkyFromKtx(p),r.scene.setSkybox(r.skybox)});this.camera.lookAt([0,0,4],[0,0,0],[0,1,0]),this.render=this.render.bind(this),this.resize=this.resize.bind(this),window.addEventListener("resize",this.resize),this.resize(),window.requestAnimationFrame(this.render)}return e.prototype.render=function(){this.renderer.render(this.swapChain,this.view),window.requestAnimationFrame(this.render)},e.prototype.resize=function(){var e=window.devicePixelRatio,r=this.canvas.width=window.innerWidth*e,t=this.canvas.height=window.innerHeight*e;this.view.setViewport([0,0,r,t]);var s=r/t,n=Filament.Camera$Fov,i=s<1?n.HORIZONTAL:n.VERTICAL;this.camera.setProjectionFov(45,s,1,10,i)},e}();Filament.init([u,l],function(){window.app=new f(document.getElementsByTagName("canvas")[0])}),s.createWorker(function(e,r){r(e.x+e.y)},function(e){console.log("We received this response from the worker: "+e)}).postMessage({x:5,y:5})},function(e,r){},function(e,r,t){"use strict";r.__esModule=!0;var s=t(3);r.createWorker=s.createWorker},function(e,r,t){"use strict";r.__esModule=!0,r.createWorker=function(e,r){return void 0===r&&(r=function(e){}),new s(e,r)};var s=function(){function e(e,r){void 0===r&&(r=function(e){});var t=this;this.workerFunction=e,this.onMessage=r;var s=new Blob(["self.onmessage=function(e){"+("("+e+").call(this, e.data, postMessage)")+"}"],{type:"application/javascript"});this._nativeWorker=new Worker(URL.createObjectURL(s)),this._nativeWorker.onmessage=function(e){t.onMessage(e.data)}}return e.prototype.postMessage=function(e,r){this._nativeWorker.postMessage(e,r)},e.prototype.terminate=function(){this._nativeWorker.terminate()},e}()},function(e,r,t){"use strict";r.__esModule=!0,r.processMesh=function(e,r,t,s){var n,i,o,a,c,l,u,p,h,f,m,v=0,d=e.length,g={},y=0;if(void 0!==t){for(n=0;n<t.length;n++)t[n].length&&y++;for(n=0;n<y;n++)g[n]=[]}for(var k=[];v<d;){var b=e[v++],S=2&b,w=8&b,x=16&b,_=32&b,M=64&b,F=128&b;if(1&b){if(p=[e[v],e[v+1],e[v+3]],h=[e[v+1],e[v+2],e[v+3]],v+=4,S&&(l=e[v++],p.materialIndex=l,h.materialIndex=l),o=e.length,w)for(n=0;n<y;n++)for(f=t[n],g[n][o]=[],g[n][o+1]=[],i=0;i<4;i++)m=[f[2*(c=e[v++])],f[2*c+1]],2!==i&&g[n][o].push(m),0!==i&&g[n][o+1].push(m);if(x&&(a=3*e[v++]),_)for(n=0;n<4;n++)a=3*e[v++],s[a++],s[a++],s[a];if(M&&e[v++],F)for(n=0;n<4;n++)e[v++];k.push(p[0]),k.push(p[1]),k.push(p[2]),k.push(h[0]),k.push(h[1]),k.push(h[2])}else{if(u=[e[v++],e[v++],e[v++]],S&&(l=e[v++],u.materialIndex=l),o=e.length,w)for(n=0;n<y;n++)for(f=t[n],g[n][o]=[],i=0;i<3;i++)m=[f[2*(c=e[v++])],f[2*c+1]],g[n][o].push(m);if(x&&(a=3*e[v++]),_)for(n=0;n<3;n++)a=3*e[v++],s[a++],s[a++],s[a];if(M&&e[v++],F)for(n=0;n<3;n++)e[v++];k.push(u[0]),k.push(u[1]),k.push(u[2])}}return k}},function(e,r,t){"use strict";r.__esModule=!0,r.Scrapers1={metadata:{formatVersion:3.1,sourceFile:"skyscrapper.obj",generatedBy:"OBJConverter",vertices:96,faces:176,normals:24,colors:0,uvs:24,materials:1},scale:1,materials:[{colorAmbient:[.588235,.588235,.588235],colorDiffuse:[.588235,.588235,.588235],colorSpecular:[0,0,0],illumination:2,opticalDensity:1.5,specularCoef:9.999999,transparency:0}],vertices:Scrapers1Vertices,morphTargets:[],morphColors:[],normals:Scrapers1Normals,colors:[],uvs:[Scrapers1Uvs],faces:Scrapers1Faces}},function(e,r,t){"use strict";r.__esModule=!0,r.Scrapers2={metadata:{formatVersion:3.1,sourceFile:"skyscrapper2.obj",generatedBy:"OBJConverter",vertices:96,faces:176,normals:24,colors:0,uvs:24,materials:1},scale:1,materials:[{colorAmbient:[.588235,.588235,.588235],colorDiffuse:[.588235,.588235,.588235],colorSpecular:[0,0,0],illumination:2,opticalDensity:1.5,specularCoef:9.999999,transparency:0}],vertices:Scrapers2Vertices,morphTargets:[],morphColors:[],normals:Scrapers2Normals,colors:[],uvs:[Scrapers2Uvs],faces:Scrapers2Faces}},function(e,r,t){"use strict";r.__esModule=!0,r.Track={metadata:{formatVersion:3.1,sourceFile:"track2o.obj",generatedBy:"OBJConverter",vertices:4800,faces:9600,normals:6800,colors:0,uvs:59,materials:1},scale:1,materials:[{colorAmbient:[.588235,.588235,.588235],colorDiffuse:[.588235,.588235,.588235],colorSpecular:[0,0,0],illumination:2,opticalDensity:1.5,specularCoef:9.999999,transparency:0}],vertices:TrackVertices,morphTargets:[],morphColors:[],normals:TrackNormals,colors:[],uvs:[TrackUvs],faces:TrackFaces}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,