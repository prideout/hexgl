!function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";t.__esModule=!0,i(1);var n=i(2),r=i(3),s="env/syferfontein_18d_clear_2k",o=s+"_ibl"+Filament.getSupportedFormatSuffix("etc s3tc")+".ktx.bmp",a=s+"_skybox_tiny.ktx.bmp",c=s+"_skybox.ktx.bmp",u=function(){function e(e){var t=this;this.canvas=e,this.engine=Filament.Engine.create(e),this.scene=this.engine.createScene(),this.skybox=this.engine.createSkyFromKtx(a),this.scene.setSkybox(this.skybox),this.indirectLight=this.engine.createIblFromKtx(o),this.indirectLight.setIntensity(1e5),this.scene.setIndirectLight(this.indirectLight),this.swapChain=this.engine.createSwapChain(),this.renderer=this.engine.createRenderer(),this.camera=this.engine.createCamera(),this.view=this.engine.createView(),this.view.setCamera(this.camera),this.view.setScene(this.scene),console.info("philip",n.Track.vertices),Filament.fetch([c],function(){t.engine.destroySkybox(t.skybox),t.skybox=t.engine.createSkyFromKtx(c),t.scene.setSkybox(t.skybox)});this.camera.lookAt([0,0,4],[0,0,0],[0,1,0]),this.render=this.render.bind(this),this.resize=this.resize.bind(this),window.addEventListener("resize",this.resize),this.resize(),window.requestAnimationFrame(this.render)}return e.prototype.render=function(){this.renderer.render(this.swapChain,this.view),window.requestAnimationFrame(this.render)},e.prototype.resize=function(){var e=window.devicePixelRatio,t=this.canvas.width=window.innerWidth*e,i=this.canvas.height=window.innerHeight*e;this.view.setViewport([0,0,t,i]);var n=t/i,r=Filament.Camera$Fov,s=n<1?r.HORIZONTAL:r.VERTICAL;this.camera.setProjectionFov(45,n,1,10,s)},e}();Filament.init([a,o],function(){window.app=new u(document.getElementsByTagName("canvas")[0])}),r.createWorker(function(e,t){t(e.x+e.y)},function(e){console.log("We received this response from the worker: "+e)}).postMessage({x:5,y:5})},function(e,t){},function(e,t,i){"use strict";t.__esModule=!0,t.Track={metadata:{formatVersion:3.1,sourceFile:"track2o.obj",generatedBy:"OBJConverter",vertices:4800,faces:9600,normals:6800,colors:0,uvs:59,materials:1},scale:1,materials:[{colorAmbient:[.588235,.588235,.588235],colorDiffuse:[.588235,.588235,.588235],colorSpecular:[0,0,0],illumination:2,opticalDensity:1.5,specularCoef:9.999999,transparency:0}],vertices:TrackVertices,morphTargets:[],morphColors:[],normals:TrackNormals,colors:[],uvs:[TrackUvs],faces:TrackFaces}},function(e,t,i){"use strict";t.__esModule=!0;var n=i(4);t.createWorker=n.createWorker},function(e,t,i){"use strict";t.__esModule=!0,t.createWorker=function(e,t){return void 0===t&&(t=function(e){}),new n(e,t)};var n=function(){function e(e,t){void 0===t&&(t=function(e){});var i=this;this.workerFunction=e,this.onMessage=t;var n=new Blob(["self.onmessage=function(e){"+("("+e+").call(this, e.data, postMessage)")+"}"],{type:"application/javascript"});this._nativeWorker=new Worker(URL.createObjectURL(n)),this._nativeWorker.onmessage=function(e){i.onMessage(e.data)}}return e.prototype.postMessage=function(e,t){this._nativeWorker.postMessage(e,t)},e.prototype.terminate=function(){this._nativeWorker.terminate()},e}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,